
rtos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800200  00002ae4  00002b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ae4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000012b1  00800244  00800244  00002bbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002bbc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006c0  00000000  00000000  00002bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000c5ac  00000000  00000000  000032ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000021fa  00000000  00000000  0000f858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003b6f  00000000  00000000  00011a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001b54  00000000  00000000  000155c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000236c  00000000  00000000  00017118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000039e1  00000000  00000000  00019484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000570  00000000  00000000  0001ce65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ff c0       	rjmp	.+510    	; 0x200 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__vector_1>
       8:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__vector_2>
       c:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__vector_3>
      10:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__vector_4>
      14:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__vector_5>
      18:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__vector_6>
      1c:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__vector_7>
      20:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__vector_8>
      24:	1d c1       	rjmp	.+570    	; 0x260 <__bad_interrupt>
      26:	00 00       	nop
      28:	1b c1       	rjmp	.+566    	; 0x260 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	19 c1       	rjmp	.+562    	; 0x260 <__bad_interrupt>
      2e:	00 00       	nop
      30:	17 c1       	rjmp	.+558    	; 0x260 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__vector_13>
      38:	13 c1       	rjmp	.+550    	; 0x260 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	11 c1       	rjmp	.+546    	; 0x260 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0f c1       	rjmp	.+542    	; 0x260 <__bad_interrupt>
      42:	00 00       	nop
      44:	0d c1       	rjmp	.+538    	; 0x260 <__bad_interrupt>
      46:	00 00       	nop
      48:	0b c1       	rjmp	.+534    	; 0x260 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	09 c1       	rjmp	.+530    	; 0x260 <__bad_interrupt>
      4e:	00 00       	nop
      50:	07 c1       	rjmp	.+526    	; 0x260 <__bad_interrupt>
      52:	00 00       	nop
      54:	05 c1       	rjmp	.+522    	; 0x260 <__bad_interrupt>
      56:	00 00       	nop
      58:	03 c1       	rjmp	.+518    	; 0x260 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <__vector_23>
      60:	ff c0       	rjmp	.+510    	; 0x260 <__bad_interrupt>
      62:	00 00       	nop
      64:	4e c4       	rjmp	.+2204   	; 0x902 <__vector_25>
      66:	00 00       	nop
      68:	7f c4       	rjmp	.+2302   	; 0x968 <__vector_26>
      6a:	00 00       	nop
      6c:	f9 c0       	rjmp	.+498    	; 0x260 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f7 c0       	rjmp	.+494    	; 0x260 <__bad_interrupt>
      72:	00 00       	nop
      74:	f5 c0       	rjmp	.+490    	; 0x260 <__bad_interrupt>
      76:	00 00       	nop
      78:	f3 c0       	rjmp	.+486    	; 0x260 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f1 c0       	rjmp	.+482    	; 0x260 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ef c0       	rjmp	.+478    	; 0x260 <__bad_interrupt>
      82:	00 00       	nop
      84:	ed c0       	rjmp	.+474    	; 0x260 <__bad_interrupt>
      86:	00 00       	nop
      88:	eb c0       	rjmp	.+470    	; 0x260 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e9 c0       	rjmp	.+466    	; 0x260 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f6 c4       	rjmp	.+2540   	; 0xa7e <__vector_36>
      92:	00 00       	nop
      94:	27 c5       	rjmp	.+2638   	; 0xae4 <__vector_37>
      96:	00 00       	nop
      98:	e3 c0       	rjmp	.+454    	; 0x260 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e1 c0       	rjmp	.+450    	; 0x260 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	df c0       	rjmp	.+446    	; 0x260 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dd c0       	rjmp	.+442    	; 0x260 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	db c0       	rjmp	.+438    	; 0x260 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d9 c0       	rjmp	.+434    	; 0x260 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d7 c0       	rjmp	.+430    	; 0x260 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d5 c0       	rjmp	.+426    	; 0x260 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d3 c0       	rjmp	.+422    	; 0x260 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <__vector_47>
      c0:	cf c0       	rjmp	.+414    	; 0x260 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cd c0       	rjmp	.+410    	; 0x260 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	cb c0       	rjmp	.+406    	; 0x260 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	96 c5       	rjmp	.+2860   	; 0xbfa <__vector_51>
      ce:	00 00       	nop
      d0:	c7 c5       	rjmp	.+2958   	; 0xc60 <__vector_52>
      d2:	00 00       	nop
      d4:	c5 c0       	rjmp	.+394    	; 0x260 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4e c6       	rjmp	.+3228   	; 0xd76 <__vector_54>
      da:	00 00       	nop
      dc:	7f c6       	rjmp	.+3326   	; 0xddc <__vector_55>
      de:	00 00       	nop
      e0:	bf c0       	rjmp	.+382    	; 0x260 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	24 14       	cp	r2, r4
      e6:	2e 14       	cp	r2, r14
      e8:	06 14       	cp	r0, r6
      ea:	10 14       	cp	r1, r0
      ec:	1a 14       	cp	r1, r10
      ee:	a6 14       	cp	r10, r6
      f0:	38 14       	cp	r3, r8
      f2:	42 14       	cp	r4, r2
      f4:	4c 14       	cp	r4, r12
      f6:	56 14       	cp	r5, r6
      f8:	60 14       	cp	r6, r0
      fa:	6a 14       	cp	r6, r10
      fc:	74 14       	cp	r7, r4
      fe:	7e 14       	cp	r7, r14
     100:	a6 14       	cp	r10, r6
     102:	88 14       	cp	r8, r8
     104:	92 14       	cp	r9, r2
     106:	9c 14       	cp	r9, r12

00000108 <__trampolines_end>:
     108:	02 00       	.word	0x0002	; ????

00000109 <port_to_output_PGM>:
     109:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     119:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000123 <digital_pin_to_port_PGM>:
     123:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     133:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     143:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     153:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     163:	0b 0b 0b 0b 0b 0b                                   ......

00000169 <digital_pin_to_bit_mask_PGM>:
     169:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     179:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     189:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     199:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1a9:	04 08 10 20 40 80                                   ... @.

000001af <digital_pin_to_timer_PGM>:
     1af:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     1db:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000001f6 <__ctors_start>:
     1f6:	33 05       	cpc	r19, r3
     1f8:	f1 05       	cpc	r31, r1
     1fa:	af 06       	cpc	r10, r31
     1fc:	6f 07       	cpc	r22, r31
     1fe:	40 08       	sbc	r4, r0

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	d1 e2       	ldi	r29, 0x21	; 33
     208:	de bf       	out	0x3e, r29	; 62
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	0c bf       	out	0x3c, r16	; 60

00000210 <__do_copy_data>:
     210:	12 e0       	ldi	r17, 0x02	; 2
     212:	a0 e0       	ldi	r26, 0x00	; 0
     214:	b2 e0       	ldi	r27, 0x02	; 2
     216:	e4 ee       	ldi	r30, 0xE4	; 228
     218:	fa e2       	ldi	r31, 0x2A	; 42
     21a:	00 e0       	ldi	r16, 0x00	; 0
     21c:	0b bf       	out	0x3b, r16	; 59
     21e:	02 c0       	rjmp	.+4      	; 0x224 <__do_copy_data+0x14>
     220:	07 90       	elpm	r0, Z+
     222:	0d 92       	st	X+, r0
     224:	a4 34       	cpi	r26, 0x44	; 68
     226:	b1 07       	cpc	r27, r17
     228:	d9 f7       	brne	.-10     	; 0x220 <__do_copy_data+0x10>

0000022a <__do_clear_bss>:
     22a:	24 e1       	ldi	r18, 0x14	; 20
     22c:	a4 e4       	ldi	r26, 0x44	; 68
     22e:	b2 e0       	ldi	r27, 0x02	; 2
     230:	01 c0       	rjmp	.+2      	; 0x234 <.do_clear_bss_start>

00000232 <.do_clear_bss_loop>:
     232:	1d 92       	st	X+, r1

00000234 <.do_clear_bss_start>:
     234:	a5 3f       	cpi	r26, 0xF5	; 245
     236:	b2 07       	cpc	r27, r18
     238:	e1 f7       	brne	.-8      	; 0x232 <.do_clear_bss_loop>

0000023a <__do_global_ctors>:
     23a:	11 e0       	ldi	r17, 0x01	; 1
     23c:	c0 e0       	ldi	r28, 0x00	; 0
     23e:	d2 e0       	ldi	r29, 0x02	; 2
     240:	00 e0       	ldi	r16, 0x00	; 0
     242:	06 c0       	rjmp	.+12     	; 0x250 <__do_global_ctors+0x16>
     244:	22 97       	sbiw	r28, 0x02	; 2
     246:	01 09       	sbc	r16, r1
     248:	fe 01       	movw	r30, r28
     24a:	0b bf       	out	0x3b, r16	; 59
     24c:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <__tablejump_elpm__>
     250:	c6 3f       	cpi	r28, 0xF6	; 246
     252:	d1 07       	cpc	r29, r17
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	08 07       	cpc	r16, r24
     258:	a9 f7       	brne	.-22     	; 0x244 <__do_global_ctors+0xa>
     25a:	25 d7       	rcall	.+3658   	; 0x10a6 <main>
     25c:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <_exit>

00000260 <__bad_interrupt>:
     260:	cf ce       	rjmp	.-610    	; 0x0 <__vectors>

00000262 <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
     26a:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <abort>

0000026e <_Z14serialEventRunv>:
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	87 ee       	ldi	r24, 0xE7	; 231
     278:	94 e0       	ldi	r25, 0x04	; 4
     27a:	00 97       	sbiw	r24, 0x00	; 0
     27c:	49 f0       	breq	.+18     	; 0x290 <_Z14serialEventRunv+0x22>
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	00 97       	sbiw	r24, 0x00	; 0
     284:	29 f0       	breq	.+10     	; 0x290 <_Z14serialEventRunv+0x22>
     286:	a3 d3       	rcall	.+1862   	; 0x9ce <_Z17Serial0_availablev>
     288:	88 23       	and	r24, r24
     28a:	11 f0       	breq	.+4      	; 0x290 <_Z14serialEventRunv+0x22>
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	01 c0       	rjmp	.+2      	; 0x292 <_Z14serialEventRunv+0x24>
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	88 23       	and	r24, r24
     294:	11 f0       	breq	.+4      	; 0x29a <_Z14serialEventRunv+0x2c>
     296:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     29a:	85 ea       	ldi	r24, 0xA5	; 165
     29c:	95 e0       	ldi	r25, 0x05	; 5
     29e:	00 97       	sbiw	r24, 0x00	; 0
     2a0:	49 f0       	breq	.+18     	; 0x2b4 <_Z14serialEventRunv+0x46>
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	00 97       	sbiw	r24, 0x00	; 0
     2a8:	29 f0       	breq	.+10     	; 0x2b4 <_Z14serialEventRunv+0x46>
     2aa:	4f d4       	rcall	.+2206   	; 0xb4a <_Z17Serial1_availablev>
     2ac:	88 23       	and	r24, r24
     2ae:	11 f0       	breq	.+4      	; 0x2b4 <_Z14serialEventRunv+0x46>
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <_Z14serialEventRunv+0x48>
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	88 23       	and	r24, r24
     2b8:	11 f0       	breq	.+4      	; 0x2be <_Z14serialEventRunv+0x50>
     2ba:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     2be:	83 e6       	ldi	r24, 0x63	; 99
     2c0:	96 e0       	ldi	r25, 0x06	; 6
     2c2:	00 97       	sbiw	r24, 0x00	; 0
     2c4:	49 f0       	breq	.+18     	; 0x2d8 <_Z14serialEventRunv+0x6a>
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	00 97       	sbiw	r24, 0x00	; 0
     2cc:	29 f0       	breq	.+10     	; 0x2d8 <_Z14serialEventRunv+0x6a>
     2ce:	fb d4       	rcall	.+2550   	; 0xcc6 <_Z17Serial2_availablev>
     2d0:	88 23       	and	r24, r24
     2d2:	11 f0       	breq	.+4      	; 0x2d8 <_Z14serialEventRunv+0x6a>
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <_Z14serialEventRunv+0x6c>
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	88 23       	and	r24, r24
     2dc:	11 f0       	breq	.+4      	; 0x2e2 <_Z14serialEventRunv+0x74>
     2de:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     2e2:	81 e2       	ldi	r24, 0x21	; 33
     2e4:	97 e0       	ldi	r25, 0x07	; 7
     2e6:	00 97       	sbiw	r24, 0x00	; 0
     2e8:	49 f0       	breq	.+18     	; 0x2fc <_Z14serialEventRunv+0x8e>
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	00 97       	sbiw	r24, 0x00	; 0
     2f0:	29 f0       	breq	.+10     	; 0x2fc <_Z14serialEventRunv+0x8e>
     2f2:	a7 d5       	rcall	.+2894   	; 0xe42 <_Z17Serial3_availablev>
     2f4:	88 23       	and	r24, r24
     2f6:	11 f0       	breq	.+4      	; 0x2fc <_Z14serialEventRunv+0x8e>
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <_Z14serialEventRunv+0x90>
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	88 23       	and	r24, r24
     300:	11 f0       	breq	.+4      	; 0x306 <_Z14serialEventRunv+0x98>
     302:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	00 d0       	rcall	.+0      	; 0x312 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x6>
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	9b 83       	std	Y+3, r25	; 0x03
     318:	8a 83       	std	Y+2, r24	; 0x02
     31a:	8a 81       	ldd	r24, Y+2	; 0x02
     31c:	9b 81       	ldd	r25, Y+3	; 0x03
     31e:	fc 01       	movw	r30, r24
     320:	84 8d       	ldd	r24, Z+28	; 0x1c
     322:	88 2f       	mov	r24, r24
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	2a 81       	ldd	r18, Y+2	; 0x02
     328:	3b 81       	ldd	r19, Y+3	; 0x03
     32a:	82 0f       	add	r24, r18
     32c:	93 1f       	adc	r25, r19
     32e:	83 5a       	subi	r24, 0xA3	; 163
     330:	9f 4f       	sbci	r25, 0xFF	; 255
     332:	fc 01       	movw	r30, r24
     334:	80 81       	ld	r24, Z
     336:	89 83       	std	Y+1, r24	; 0x01
     338:	8a 81       	ldd	r24, Y+2	; 0x02
     33a:	9b 81       	ldd	r25, Y+3	; 0x03
     33c:	fc 01       	movw	r30, r24
     33e:	84 8d       	ldd	r24, Z+28	; 0x1c
     340:	88 2f       	mov	r24, r24
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	01 96       	adiw	r24, 0x01	; 1
     346:	8f 73       	andi	r24, 0x3F	; 63
     348:	90 78       	andi	r25, 0x80	; 128
     34a:	99 23       	and	r25, r25
     34c:	24 f4       	brge	.+8      	; 0x356 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x4a>
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	80 6c       	ori	r24, 0xC0	; 192
     352:	9f 6f       	ori	r25, 0xFF	; 255
     354:	01 96       	adiw	r24, 0x01	; 1
     356:	28 2f       	mov	r18, r24
     358:	8a 81       	ldd	r24, Y+2	; 0x02
     35a:	9b 81       	ldd	r25, Y+3	; 0x03
     35c:	fc 01       	movw	r30, r24
     35e:	24 8f       	std	Z+28, r18	; 0x1c
     360:	8a 81       	ldd	r24, Y+2	; 0x02
     362:	9b 81       	ldd	r25, Y+3	; 0x03
     364:	fc 01       	movw	r30, r24
     366:	86 89       	ldd	r24, Z+22	; 0x16
     368:	97 89       	ldd	r25, Z+23	; 0x17
     36a:	29 81       	ldd	r18, Y+1	; 0x01
     36c:	fc 01       	movw	r30, r24
     36e:	20 83       	st	Z, r18
     370:	8a 81       	ldd	r24, Y+2	; 0x02
     372:	9b 81       	ldd	r25, Y+3	; 0x03
     374:	fc 01       	movw	r30, r24
     376:	80 89       	ldd	r24, Z+16	; 0x10
     378:	91 89       	ldd	r25, Z+17	; 0x11
     37a:	2a 81       	ldd	r18, Y+2	; 0x02
     37c:	3b 81       	ldd	r19, Y+3	; 0x03
     37e:	f9 01       	movw	r30, r18
     380:	20 89       	ldd	r18, Z+16	; 0x10
     382:	31 89       	ldd	r19, Z+17	; 0x11
     384:	f9 01       	movw	r30, r18
     386:	20 81       	ld	r18, Z
     388:	20 64       	ori	r18, 0x40	; 64
     38a:	fc 01       	movw	r30, r24
     38c:	20 83       	st	Z, r18
     38e:	8a 81       	ldd	r24, Y+2	; 0x02
     390:	9b 81       	ldd	r25, Y+3	; 0x03
     392:	fc 01       	movw	r30, r24
     394:	23 8d       	ldd	r18, Z+27	; 0x1b
     396:	8a 81       	ldd	r24, Y+2	; 0x02
     398:	9b 81       	ldd	r25, Y+3	; 0x03
     39a:	fc 01       	movw	r30, r24
     39c:	94 8d       	ldd	r25, Z+28	; 0x1c
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	29 17       	cp	r18, r25
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x9a>
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	88 23       	and	r24, r24
     3a8:	79 f0       	breq	.+30     	; 0x3c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0xbc>
     3aa:	8a 81       	ldd	r24, Y+2	; 0x02
     3ac:	9b 81       	ldd	r25, Y+3	; 0x03
     3ae:	fc 01       	movw	r30, r24
     3b0:	82 89       	ldd	r24, Z+18	; 0x12
     3b2:	93 89       	ldd	r25, Z+19	; 0x13
     3b4:	2a 81       	ldd	r18, Y+2	; 0x02
     3b6:	3b 81       	ldd	r19, Y+3	; 0x03
     3b8:	f9 01       	movw	r30, r18
     3ba:	22 89       	ldd	r18, Z+18	; 0x12
     3bc:	33 89       	ldd	r19, Z+19	; 0x13
     3be:	f9 01       	movw	r30, r18
     3c0:	20 81       	ld	r18, Z
     3c2:	2f 7d       	andi	r18, 0xDF	; 223
     3c4:	fc 01       	movw	r30, r24
     3c6:	20 83       	st	Z, r18
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <_ZN14HardwareSerial9availableEv>:
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	1f 92       	push	r1
     3da:	1f 92       	push	r1
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	9a 83       	std	Y+2, r25	; 0x02
     3e2:	89 83       	std	Y+1, r24	; 0x01
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	9a 81       	ldd	r25, Y+2	; 0x02
     3e8:	fc 01       	movw	r30, r24
     3ea:	81 8d       	ldd	r24, Z+25	; 0x19
     3ec:	88 2f       	mov	r24, r24
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	9c 01       	movw	r18, r24
     3f2:	20 5c       	subi	r18, 0xC0	; 192
     3f4:	3f 4f       	sbci	r19, 0xFF	; 255
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	9a 81       	ldd	r25, Y+2	; 0x02
     3fa:	fc 01       	movw	r30, r24
     3fc:	82 8d       	ldd	r24, Z+26	; 0x1a
     3fe:	88 2f       	mov	r24, r24
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	a9 01       	movw	r20, r18
     404:	48 1b       	sub	r20, r24
     406:	59 0b       	sbc	r21, r25
     408:	ca 01       	movw	r24, r20
     40a:	8f 73       	andi	r24, 0x3F	; 63
     40c:	99 27       	eor	r25, r25
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <_ZN14HardwareSerial4peekEv>:
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	1f 92       	push	r1
     41e:	1f 92       	push	r1
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	9a 83       	std	Y+2, r25	; 0x02
     426:	89 83       	std	Y+1, r24	; 0x01
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	fc 01       	movw	r30, r24
     42e:	21 8d       	ldd	r18, Z+25	; 0x19
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	9a 81       	ldd	r25, Y+2	; 0x02
     434:	fc 01       	movw	r30, r24
     436:	92 8d       	ldd	r25, Z+26	; 0x1a
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	29 17       	cp	r18, r25
     43c:	09 f0       	breq	.+2      	; 0x440 <_ZN14HardwareSerial4peekEv+0x28>
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	88 23       	and	r24, r24
     442:	19 f0       	breq	.+6      	; 0x44a <_ZN14HardwareSerial4peekEv+0x32>
     444:	8f ef       	ldi	r24, 0xFF	; 255
     446:	9f ef       	ldi	r25, 0xFF	; 255
     448:	0f c0       	rjmp	.+30     	; 0x468 <_ZN14HardwareSerial4peekEv+0x50>
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	9a 81       	ldd	r25, Y+2	; 0x02
     44e:	fc 01       	movw	r30, r24
     450:	82 8d       	ldd	r24, Z+26	; 0x1a
     452:	88 2f       	mov	r24, r24
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	29 81       	ldd	r18, Y+1	; 0x01
     458:	3a 81       	ldd	r19, Y+2	; 0x02
     45a:	82 0f       	add	r24, r18
     45c:	93 1f       	adc	r25, r19
     45e:	4d 96       	adiw	r24, 0x1d	; 29
     460:	fc 01       	movw	r30, r24
     462:	80 81       	ld	r24, Z
     464:	88 2f       	mov	r24, r24
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <_ZN14HardwareSerial4readEv>:
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	00 d0       	rcall	.+0      	; 0x478 <_ZN14HardwareSerial4readEv+0x6>
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
     47c:	9b 83       	std	Y+3, r25	; 0x03
     47e:	8a 83       	std	Y+2, r24	; 0x02
     480:	8a 81       	ldd	r24, Y+2	; 0x02
     482:	9b 81       	ldd	r25, Y+3	; 0x03
     484:	fc 01       	movw	r30, r24
     486:	21 8d       	ldd	r18, Z+25	; 0x19
     488:	8a 81       	ldd	r24, Y+2	; 0x02
     48a:	9b 81       	ldd	r25, Y+3	; 0x03
     48c:	fc 01       	movw	r30, r24
     48e:	92 8d       	ldd	r25, Z+26	; 0x1a
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	29 17       	cp	r18, r25
     494:	09 f0       	breq	.+2      	; 0x498 <_ZN14HardwareSerial4readEv+0x26>
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	88 23       	and	r24, r24
     49a:	19 f0       	breq	.+6      	; 0x4a2 <_ZN14HardwareSerial4readEv+0x30>
     49c:	8f ef       	ldi	r24, 0xFF	; 255
     49e:	9f ef       	ldi	r25, 0xFF	; 255
     4a0:	1c c0       	rjmp	.+56     	; 0x4da <_ZN14HardwareSerial4readEv+0x68>
     4a2:	8a 81       	ldd	r24, Y+2	; 0x02
     4a4:	9b 81       	ldd	r25, Y+3	; 0x03
     4a6:	fc 01       	movw	r30, r24
     4a8:	82 8d       	ldd	r24, Z+26	; 0x1a
     4aa:	88 2f       	mov	r24, r24
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	2a 81       	ldd	r18, Y+2	; 0x02
     4b0:	3b 81       	ldd	r19, Y+3	; 0x03
     4b2:	82 0f       	add	r24, r18
     4b4:	93 1f       	adc	r25, r19
     4b6:	4d 96       	adiw	r24, 0x1d	; 29
     4b8:	fc 01       	movw	r30, r24
     4ba:	80 81       	ld	r24, Z
     4bc:	89 83       	std	Y+1, r24	; 0x01
     4be:	8a 81       	ldd	r24, Y+2	; 0x02
     4c0:	9b 81       	ldd	r25, Y+3	; 0x03
     4c2:	fc 01       	movw	r30, r24
     4c4:	82 8d       	ldd	r24, Z+26	; 0x1a
     4c6:	8f 5f       	subi	r24, 0xFF	; 255
     4c8:	28 2f       	mov	r18, r24
     4ca:	2f 73       	andi	r18, 0x3F	; 63
     4cc:	8a 81       	ldd	r24, Y+2	; 0x02
     4ce:	9b 81       	ldd	r25, Y+3	; 0x03
     4d0:	fc 01       	movw	r30, r24
     4d2:	22 8f       	std	Z+26, r18	; 0x1a
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	88 2f       	mov	r24, r24
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	1f 92       	push	r1
     4ec:	1f 92       	push	r1
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	9a 83       	std	Y+2, r25	; 0x02
     4f4:	89 83       	std	Y+1, r24	; 0x01
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	9a 81       	ldd	r25, Y+2	; 0x02
     4fa:	fc 01       	movw	r30, r24
     4fc:	90 8d       	ldd	r25, Z+24	; 0x18
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	89 27       	eor	r24, r25
     502:	88 23       	and	r24, r24
     504:	09 f0       	breq	.+2      	; 0x508 <_ZN14HardwareSerial5flushEv+0x22>
    return;
     506:	4d c0       	rjmp	.+154    	; 0x5a2 <_ZN14HardwareSerial5flushEv+0xbc>

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     508:	2c c0       	rjmp	.+88     	; 0x562 <_ZN14HardwareSerial5flushEv+0x7c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     50a:	8f e5       	ldi	r24, 0x5F	; 95
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	fc 01       	movw	r30, r24
     510:	80 81       	ld	r24, Z
     512:	88 23       	and	r24, r24
     514:	7c f0       	brlt	.+30     	; 0x534 <_ZN14HardwareSerial5flushEv+0x4e>
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	9a 81       	ldd	r25, Y+2	; 0x02
     51a:	fc 01       	movw	r30, r24
     51c:	82 89       	ldd	r24, Z+18	; 0x12
     51e:	93 89       	ldd	r25, Z+19	; 0x13
     520:	fc 01       	movw	r30, r24
     522:	80 81       	ld	r24, Z
     524:	88 2f       	mov	r24, r24
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	80 72       	andi	r24, 0x20	; 32
     52a:	99 27       	eor	r25, r25
     52c:	00 97       	sbiw	r24, 0x00	; 0
     52e:	11 f0       	breq	.+4      	; 0x534 <_ZN14HardwareSerial5flushEv+0x4e>
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	01 c0       	rjmp	.+2      	; 0x536 <_ZN14HardwareSerial5flushEv+0x50>
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	88 23       	and	r24, r24
     538:	a1 f0       	breq	.+40     	; 0x562 <_ZN14HardwareSerial5flushEv+0x7c>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	9a 81       	ldd	r25, Y+2	; 0x02
     53e:	fc 01       	movw	r30, r24
     540:	80 89       	ldd	r24, Z+16	; 0x10
     542:	91 89       	ldd	r25, Z+17	; 0x11
     544:	fc 01       	movw	r30, r24
     546:	80 81       	ld	r24, Z
     548:	88 2f       	mov	r24, r24
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	80 72       	andi	r24, 0x20	; 32
     54e:	99 27       	eor	r25, r25
     550:	21 e0       	ldi	r18, 0x01	; 1
     552:	00 97       	sbiw	r24, 0x00	; 0
     554:	09 f4       	brne	.+2      	; 0x558 <_ZN14HardwareSerial5flushEv+0x72>
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	22 23       	and	r18, r18
     55a:	19 f0       	breq	.+6      	; 0x562 <_ZN14HardwareSerial5flushEv+0x7c>
	  _tx_udr_empty_irq();
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	9a 81       	ldd	r25, Y+2	; 0x02
     560:	d5 de       	rcall	.-598    	; 0x30c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	9a 81       	ldd	r25, Y+2	; 0x02
     566:	fc 01       	movw	r30, r24
     568:	82 89       	ldd	r24, Z+18	; 0x12
     56a:	93 89       	ldd	r25, Z+19	; 0x13
     56c:	fc 01       	movw	r30, r24
     56e:	80 81       	ld	r24, Z
     570:	88 2f       	mov	r24, r24
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	80 72       	andi	r24, 0x20	; 32
     576:	99 27       	eor	r25, r25
     578:	00 97       	sbiw	r24, 0x00	; 0
     57a:	69 f4       	brne	.+26     	; 0x596 <_ZN14HardwareSerial5flushEv+0xb0>
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	9a 81       	ldd	r25, Y+2	; 0x02
     580:	fc 01       	movw	r30, r24
     582:	80 89       	ldd	r24, Z+16	; 0x10
     584:	91 89       	ldd	r25, Z+17	; 0x11
     586:	fc 01       	movw	r30, r24
     588:	80 81       	ld	r24, Z
     58a:	88 2f       	mov	r24, r24
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	80 74       	andi	r24, 0x40	; 64
     590:	99 27       	eor	r25, r25
     592:	00 97       	sbiw	r24, 0x00	; 0
     594:	11 f4       	brne	.+4      	; 0x59a <_ZN14HardwareSerial5flushEv+0xb4>
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	01 c0       	rjmp	.+2      	; 0x59c <_ZN14HardwareSerial5flushEv+0xb6>
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	88 23       	and	r24, r24
     59e:	09 f0       	breq	.+2      	; 0x5a2 <_ZN14HardwareSerial5flushEv+0xbc>
     5a0:	b4 cf       	rjmp	.-152    	; 0x50a <_ZN14HardwareSerial5flushEv+0x24>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	08 95       	ret

000005ac <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	00 d0       	rcall	.+0      	; 0x5b2 <_ZN14HardwareSerial5writeEh+0x6>
     5b2:	1f 92       	push	r1
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	9b 83       	std	Y+3, r25	; 0x03
     5ba:	8a 83       	std	Y+2, r24	; 0x02
     5bc:	6c 83       	std	Y+4, r22	; 0x04
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     5be:	8a 81       	ldd	r24, Y+2	; 0x02
     5c0:	9b 81       	ldd	r25, Y+3	; 0x03
     5c2:	fc 01       	movw	r30, r24
     5c4:	23 8d       	ldd	r18, Z+27	; 0x1b
     5c6:	8a 81       	ldd	r24, Y+2	; 0x02
     5c8:	9b 81       	ldd	r25, Y+3	; 0x03
     5ca:	fc 01       	movw	r30, r24
     5cc:	84 8d       	ldd	r24, Z+28	; 0x1c
     5ce:	28 17       	cp	r18, r24
     5d0:	79 f4       	brne	.+30     	; 0x5f0 <_ZN14HardwareSerial5writeEh+0x44>
     5d2:	8a 81       	ldd	r24, Y+2	; 0x02
     5d4:	9b 81       	ldd	r25, Y+3	; 0x03
     5d6:	fc 01       	movw	r30, r24
     5d8:	80 89       	ldd	r24, Z+16	; 0x10
     5da:	91 89       	ldd	r25, Z+17	; 0x11
     5dc:	fc 01       	movw	r30, r24
     5de:	80 81       	ld	r24, Z
     5e0:	88 2f       	mov	r24, r24
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	80 72       	andi	r24, 0x20	; 32
     5e6:	99 27       	eor	r25, r25
     5e8:	00 97       	sbiw	r24, 0x00	; 0
     5ea:	11 f0       	breq	.+4      	; 0x5f0 <_ZN14HardwareSerial5writeEh+0x44>
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <_ZN14HardwareSerial5writeEh+0x46>
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	88 23       	and	r24, r24
     5f4:	d1 f0       	breq	.+52     	; 0x62a <_ZN14HardwareSerial5writeEh+0x7e>
    *_udr = c;
     5f6:	8a 81       	ldd	r24, Y+2	; 0x02
     5f8:	9b 81       	ldd	r25, Y+3	; 0x03
     5fa:	fc 01       	movw	r30, r24
     5fc:	86 89       	ldd	r24, Z+22	; 0x16
     5fe:	97 89       	ldd	r25, Z+23	; 0x17
     600:	2c 81       	ldd	r18, Y+4	; 0x04
     602:	fc 01       	movw	r30, r24
     604:	20 83       	st	Z, r18
    sbi(*_ucsra, TXC0);
     606:	8a 81       	ldd	r24, Y+2	; 0x02
     608:	9b 81       	ldd	r25, Y+3	; 0x03
     60a:	fc 01       	movw	r30, r24
     60c:	80 89       	ldd	r24, Z+16	; 0x10
     60e:	91 89       	ldd	r25, Z+17	; 0x11
     610:	2a 81       	ldd	r18, Y+2	; 0x02
     612:	3b 81       	ldd	r19, Y+3	; 0x03
     614:	f9 01       	movw	r30, r18
     616:	20 89       	ldd	r18, Z+16	; 0x10
     618:	31 89       	ldd	r19, Z+17	; 0x11
     61a:	f9 01       	movw	r30, r18
     61c:	20 81       	ld	r18, Z
     61e:	20 64       	ori	r18, 0x40	; 64
     620:	fc 01       	movw	r30, r24
     622:	20 83       	st	Z, r18
    return 1;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	64 c0       	rjmp	.+200    	; 0x6f2 <_ZN14HardwareSerial5writeEh+0x146>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     62a:	8a 81       	ldd	r24, Y+2	; 0x02
     62c:	9b 81       	ldd	r25, Y+3	; 0x03
     62e:	fc 01       	movw	r30, r24
     630:	83 8d       	ldd	r24, Z+27	; 0x1b
     632:	88 2f       	mov	r24, r24
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	8f 73       	andi	r24, 0x3F	; 63
     63a:	90 78       	andi	r25, 0x80	; 128
     63c:	99 23       	and	r25, r25
     63e:	24 f4       	brge	.+8      	; 0x648 <_ZN14HardwareSerial5writeEh+0x9c>
     640:	01 97       	sbiw	r24, 0x01	; 1
     642:	80 6c       	ori	r24, 0xC0	; 192
     644:	9f 6f       	ori	r25, 0xFF	; 255
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	89 83       	std	Y+1, r24	; 0x01
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     64a:	1e c0       	rjmp	.+60     	; 0x688 <_ZN14HardwareSerial5writeEh+0xdc>
    if (bit_is_clear(SREG, SREG_I)) {
     64c:	8f e5       	ldi	r24, 0x5F	; 95
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	fc 01       	movw	r30, r24
     652:	80 81       	ld	r24, Z
     654:	80 95       	com	r24
     656:	88 1f       	adc	r24, r24
     658:	88 27       	eor	r24, r24
     65a:	88 1f       	adc	r24, r24
     65c:	88 23       	and	r24, r24
     65e:	a1 f0       	breq	.+40     	; 0x688 <_ZN14HardwareSerial5writeEh+0xdc>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     660:	8a 81       	ldd	r24, Y+2	; 0x02
     662:	9b 81       	ldd	r25, Y+3	; 0x03
     664:	fc 01       	movw	r30, r24
     666:	80 89       	ldd	r24, Z+16	; 0x10
     668:	91 89       	ldd	r25, Z+17	; 0x11
     66a:	fc 01       	movw	r30, r24
     66c:	80 81       	ld	r24, Z
     66e:	88 2f       	mov	r24, r24
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	80 72       	andi	r24, 0x20	; 32
     674:	99 27       	eor	r25, r25
     676:	21 e0       	ldi	r18, 0x01	; 1
     678:	00 97       	sbiw	r24, 0x00	; 0
     67a:	09 f4       	brne	.+2      	; 0x67e <_ZN14HardwareSerial5writeEh+0xd2>
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	22 23       	and	r18, r18
     680:	19 f0       	breq	.+6      	; 0x688 <_ZN14HardwareSerial5writeEh+0xdc>
	_tx_udr_empty_irq();
     682:	8a 81       	ldd	r24, Y+2	; 0x02
     684:	9b 81       	ldd	r25, Y+3	; 0x03
     686:	42 de       	rcall	.-892    	; 0x30c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     688:	8a 81       	ldd	r24, Y+2	; 0x02
     68a:	9b 81       	ldd	r25, Y+3	; 0x03
     68c:	fc 01       	movw	r30, r24
     68e:	24 8d       	ldd	r18, Z+28	; 0x1c
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	99 81       	ldd	r25, Y+1	; 0x01
     694:	29 17       	cp	r18, r25
     696:	09 f0       	breq	.+2      	; 0x69a <_ZN14HardwareSerial5writeEh+0xee>
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	88 23       	and	r24, r24
     69c:	b9 f6       	brne	.-82     	; 0x64c <_ZN14HardwareSerial5writeEh+0xa0>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     69e:	8a 81       	ldd	r24, Y+2	; 0x02
     6a0:	9b 81       	ldd	r25, Y+3	; 0x03
     6a2:	fc 01       	movw	r30, r24
     6a4:	83 8d       	ldd	r24, Z+27	; 0x1b
     6a6:	88 2f       	mov	r24, r24
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	2a 81       	ldd	r18, Y+2	; 0x02
     6ac:	3b 81       	ldd	r19, Y+3	; 0x03
     6ae:	82 0f       	add	r24, r18
     6b0:	93 1f       	adc	r25, r19
     6b2:	83 5a       	subi	r24, 0xA3	; 163
     6b4:	9f 4f       	sbci	r25, 0xFF	; 255
     6b6:	2c 81       	ldd	r18, Y+4	; 0x04
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 83       	st	Z, r18
  _tx_buffer_head = i;
     6bc:	8a 81       	ldd	r24, Y+2	; 0x02
     6be:	9b 81       	ldd	r25, Y+3	; 0x03
     6c0:	29 81       	ldd	r18, Y+1	; 0x01
     6c2:	fc 01       	movw	r30, r24
     6c4:	23 8f       	std	Z+27, r18	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     6c6:	8a 81       	ldd	r24, Y+2	; 0x02
     6c8:	9b 81       	ldd	r25, Y+3	; 0x03
     6ca:	fc 01       	movw	r30, r24
     6cc:	82 89       	ldd	r24, Z+18	; 0x12
     6ce:	93 89       	ldd	r25, Z+19	; 0x13
     6d0:	2a 81       	ldd	r18, Y+2	; 0x02
     6d2:	3b 81       	ldd	r19, Y+3	; 0x03
     6d4:	f9 01       	movw	r30, r18
     6d6:	22 89       	ldd	r18, Z+18	; 0x12
     6d8:	33 89       	ldd	r19, Z+19	; 0x13
     6da:	f9 01       	movw	r30, r18
     6dc:	20 81       	ld	r18, Z
     6de:	20 62       	ori	r18, 0x20	; 32
     6e0:	fc 01       	movw	r30, r24
     6e2:	20 83       	st	Z, r18
  _written = true;
     6e4:	8a 81       	ldd	r24, Y+2	; 0x02
     6e6:	9b 81       	ldd	r25, Y+3	; 0x03
     6e8:	21 e0       	ldi	r18, 0x01	; 1
     6ea:	fc 01       	movw	r30, r24
     6ec:	20 8f       	std	Z+24, r18	; 0x18
  
  return 1;
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
}
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <_ZN5PrintC1Ev>:
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
{
}
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	1f 92       	push	r1
     706:	1f 92       	push	r1
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	9a 83       	std	Y+2, r25	; 0x02
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	9a 81       	ldd	r25, Y+2	; 0x02
     714:	2f e3       	ldi	r18, 0x3F	; 63
     716:	32 e0       	ldi	r19, 0x02	; 2
     718:	fc 01       	movw	r30, r24
     71a:	31 83       	std	Z+1, r19	; 0x01
     71c:	20 83       	st	Z, r18
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	9a 81       	ldd	r25, Y+2	; 0x02
     722:	fc 01       	movw	r30, r24
     724:	13 82       	std	Z+3, r1	; 0x03
     726:	12 82       	std	Z+2, r1	; 0x02
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	1f 92       	push	r1
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	9a 83       	std	Y+2, r25	; 0x02
     740:	89 83       	std	Y+1, r24	; 0x01
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	9a 81       	ldd	r25, Y+2	; 0x02
     746:	dc df       	rcall	.-72     	; 0x700 <_ZN5PrintC1Ev>
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	9a 81       	ldd	r25, Y+2	; 0x02
     74c:	23 e2       	ldi	r18, 0x23	; 35
     74e:	32 e0       	ldi	r19, 0x02	; 2
     750:	fc 01       	movw	r30, r24
     752:	31 83       	std	Z+1, r19	; 0x01
     754:	20 83       	st	Z, r18
     756:	29 81       	ldd	r18, Y+1	; 0x01
     758:	3a 81       	ldd	r19, Y+2	; 0x02
     75a:	88 ee       	ldi	r24, 0xE8	; 232
     75c:	93 e0       	ldi	r25, 0x03	; 3
     75e:	a0 e0       	ldi	r26, 0x00	; 0
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	f9 01       	movw	r30, r18
     764:	84 83       	std	Z+4, r24	; 0x04
     766:	95 83       	std	Z+5, r25	; 0x05
     768:	a6 83       	std	Z+6, r26	; 0x06
     76a:	b7 83       	std	Z+7, r27	; 0x07
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	08 95       	ret

00000776 <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>:
#error "Not all bit positions for UART3 are the same as for UART0"
#endif

// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(
     776:	cf 92       	push	r12
     778:	df 92       	push	r13
     77a:	ef 92       	push	r14
     77c:	ff 92       	push	r15
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	2e 97       	sbiw	r28, 0x0e	; 14
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de bf       	out	0x3e, r29	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd bf       	out	0x3d, r28	; 61
     796:	9a 83       	std	Y+2, r25	; 0x02
     798:	89 83       	std	Y+1, r24	; 0x01
     79a:	7c 83       	std	Y+4, r23	; 0x04
     79c:	6b 83       	std	Y+3, r22	; 0x03
     79e:	5e 83       	std	Y+6, r21	; 0x06
     7a0:	4d 83       	std	Y+5, r20	; 0x05
     7a2:	38 87       	std	Y+8, r19	; 0x08
     7a4:	2f 83       	std	Y+7, r18	; 0x07
     7a6:	1a 87       	std	Y+10, r17	; 0x0a
     7a8:	09 87       	std	Y+9, r16	; 0x09
     7aa:	fc 86       	std	Y+12, r15	; 0x0c
     7ac:	eb 86       	std	Y+11, r14	; 0x0b
     7ae:	de 86       	std	Y+14, r13	; 0x0e
     7b0:	cd 86       	std	Y+13, r12	; 0x0d
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     7b2:	89 81       	ldd	r24, Y+1	; 0x01
     7b4:	9a 81       	ldd	r25, Y+2	; 0x02
     7b6:	bd df       	rcall	.-134    	; 0x732 <_ZN6StreamC1Ev>
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	9a 81       	ldd	r25, Y+2	; 0x02
     7bc:	23 e1       	ldi	r18, 0x13	; 19
     7be:	32 e0       	ldi	r19, 0x02	; 2
     7c0:	fc 01       	movw	r30, r24
     7c2:	31 83       	std	Z+1, r19	; 0x01
     7c4:	20 83       	st	Z, r18
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ca:	2b 81       	ldd	r18, Y+3	; 0x03
     7cc:	3c 81       	ldd	r19, Y+4	; 0x04
     7ce:	fc 01       	movw	r30, r24
     7d0:	35 87       	std	Z+13, r19	; 0x0d
     7d2:	24 87       	std	Z+12, r18	; 0x0c
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	9a 81       	ldd	r25, Y+2	; 0x02
     7d8:	2d 81       	ldd	r18, Y+5	; 0x05
     7da:	3e 81       	ldd	r19, Y+6	; 0x06
     7dc:	fc 01       	movw	r30, r24
     7de:	37 87       	std	Z+15, r19	; 0x0f
     7e0:	26 87       	std	Z+14, r18	; 0x0e
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	9a 81       	ldd	r25, Y+2	; 0x02
     7e6:	2f 81       	ldd	r18, Y+7	; 0x07
     7e8:	38 85       	ldd	r19, Y+8	; 0x08
     7ea:	fc 01       	movw	r30, r24
     7ec:	31 8b       	std	Z+17, r19	; 0x11
     7ee:	20 8b       	std	Z+16, r18	; 0x10
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	9a 81       	ldd	r25, Y+2	; 0x02
     7f4:	29 85       	ldd	r18, Y+9	; 0x09
     7f6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7f8:	fc 01       	movw	r30, r24
     7fa:	33 8b       	std	Z+19, r19	; 0x13
     7fc:	22 8b       	std	Z+18, r18	; 0x12
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	9a 81       	ldd	r25, Y+2	; 0x02
     802:	2b 85       	ldd	r18, Y+11	; 0x0b
     804:	3c 85       	ldd	r19, Y+12	; 0x0c
     806:	fc 01       	movw	r30, r24
     808:	35 8b       	std	Z+21, r19	; 0x15
     80a:	24 8b       	std	Z+20, r18	; 0x14
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	9a 81       	ldd	r25, Y+2	; 0x02
     810:	2d 85       	ldd	r18, Y+13	; 0x0d
     812:	3e 85       	ldd	r19, Y+14	; 0x0e
     814:	fc 01       	movw	r30, r24
     816:	37 8b       	std	Z+23, r19	; 0x17
     818:	26 8b       	std	Z+22, r18	; 0x16
     81a:	89 81       	ldd	r24, Y+1	; 0x01
     81c:	9a 81       	ldd	r25, Y+2	; 0x02
     81e:	fc 01       	movw	r30, r24
     820:	11 8e       	std	Z+25, r1	; 0x19
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	9a 81       	ldd	r25, Y+2	; 0x02
     826:	fc 01       	movw	r30, r24
     828:	12 8e       	std	Z+26, r1	; 0x1a
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	9a 81       	ldd	r25, Y+2	; 0x02
     82e:	fc 01       	movw	r30, r24
     830:	13 8e       	std	Z+27, r1	; 0x1b
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	9a 81       	ldd	r25, Y+2	; 0x02
     836:	fc 01       	movw	r30, r24
     838:	14 8e       	std	Z+28, r1	; 0x1c
{
}
     83a:	2e 96       	adiw	r28, 0x0e	; 14
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	f8 94       	cli
     840:	de bf       	out	0x3e, r29	; 62
     842:	0f be       	out	0x3f, r0	; 63
     844:	cd bf       	out	0x3d, r28	; 61
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	1f 91       	pop	r17
     84c:	0f 91       	pop	r16
     84e:	ff 90       	pop	r15
     850:	ef 90       	pop	r14
     852:	df 90       	pop	r13
     854:	cf 90       	pop	r12
     856:	08 95       	ret

00000858 <_ZN14HardwareSerial16_rx_complete_irqEv>:

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	00 d0       	rcall	.+0      	; 0x85e <_ZN14HardwareSerial16_rx_complete_irqEv+0x6>
     85e:	1f 92       	push	r1
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	9c 83       	std	Y+4, r25	; 0x04
     866:	8b 83       	std	Y+3, r24	; 0x03
  if (bit_is_clear(*_ucsra, UPE0)) {
     868:	8b 81       	ldd	r24, Y+3	; 0x03
     86a:	9c 81       	ldd	r25, Y+4	; 0x04
     86c:	fc 01       	movw	r30, r24
     86e:	80 89       	ldd	r24, Z+16	; 0x10
     870:	91 89       	ldd	r25, Z+17	; 0x11
     872:	fc 01       	movw	r30, r24
     874:	80 81       	ld	r24, Z
     876:	88 2f       	mov	r24, r24
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	84 70       	andi	r24, 0x04	; 4
     87c:	99 27       	eor	r25, r25
     87e:	21 e0       	ldi	r18, 0x01	; 1
     880:	00 97       	sbiw	r24, 0x00	; 0
     882:	09 f0       	breq	.+2      	; 0x886 <_ZN14HardwareSerial16_rx_complete_irqEv+0x2e>
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	22 23       	and	r18, r18
     888:	71 f1       	breq	.+92     	; 0x8e6 <_ZN14HardwareSerial16_rx_complete_irqEv+0x8e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     88a:	8b 81       	ldd	r24, Y+3	; 0x03
     88c:	9c 81       	ldd	r25, Y+4	; 0x04
     88e:	fc 01       	movw	r30, r24
     890:	86 89       	ldd	r24, Z+22	; 0x16
     892:	97 89       	ldd	r25, Z+23	; 0x17
     894:	fc 01       	movw	r30, r24
     896:	80 81       	ld	r24, Z
     898:	89 83       	std	Y+1, r24	; 0x01
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     89a:	8b 81       	ldd	r24, Y+3	; 0x03
     89c:	9c 81       	ldd	r25, Y+4	; 0x04
     89e:	fc 01       	movw	r30, r24
     8a0:	81 8d       	ldd	r24, Z+25	; 0x19
     8a2:	8f 5f       	subi	r24, 0xFF	; 255
     8a4:	8f 73       	andi	r24, 0x3F	; 63
     8a6:	8a 83       	std	Y+2, r24	; 0x02

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
     8aa:	9c 81       	ldd	r25, Y+4	; 0x04
     8ac:	fc 01       	movw	r30, r24
     8ae:	22 8d       	ldd	r18, Z+26	; 0x1a
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	9a 81       	ldd	r25, Y+2	; 0x02
     8b4:	29 17       	cp	r18, r25
     8b6:	09 f4       	brne	.+2      	; 0x8ba <_ZN14HardwareSerial16_rx_complete_irqEv+0x62>
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	88 23       	and	r24, r24
     8bc:	99 f0       	breq	.+38     	; 0x8e4 <_ZN14HardwareSerial16_rx_complete_irqEv+0x8c>
      _rx_buffer[_rx_buffer_head] = c;
     8be:	8b 81       	ldd	r24, Y+3	; 0x03
     8c0:	9c 81       	ldd	r25, Y+4	; 0x04
     8c2:	fc 01       	movw	r30, r24
     8c4:	81 8d       	ldd	r24, Z+25	; 0x19
     8c6:	88 2f       	mov	r24, r24
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	2b 81       	ldd	r18, Y+3	; 0x03
     8cc:	3c 81       	ldd	r19, Y+4	; 0x04
     8ce:	82 0f       	add	r24, r18
     8d0:	93 1f       	adc	r25, r19
     8d2:	4d 96       	adiw	r24, 0x1d	; 29
     8d4:	29 81       	ldd	r18, Y+1	; 0x01
     8d6:	fc 01       	movw	r30, r24
     8d8:	20 83       	st	Z, r18
      _rx_buffer_head = i;
     8da:	8b 81       	ldd	r24, Y+3	; 0x03
     8dc:	9c 81       	ldd	r25, Y+4	; 0x04
     8de:	2a 81       	ldd	r18, Y+2	; 0x02
     8e0:	fc 01       	movw	r30, r24
     8e2:	21 8f       	std	Z+25, r18	; 0x19
     8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <_ZN14HardwareSerial16_rx_complete_irqEv+0x9c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     8e6:	8b 81       	ldd	r24, Y+3	; 0x03
     8e8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ea:	fc 01       	movw	r30, r24
     8ec:	86 89       	ldd	r24, Z+22	; 0x16
     8ee:	97 89       	ldd	r25, Z+23	; 0x17
     8f0:	fc 01       	movw	r30, r24
     8f2:	80 81       	ld	r24, Z
  };
}
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret

00000902 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     902:	1f 92       	push	r1
     904:	0f 92       	push	r0
     906:	00 90 5f 00 	lds	r0, 0x005F
     90a:	0f 92       	push	r0
     90c:	11 24       	eor	r1, r1
     90e:	00 90 5b 00 	lds	r0, 0x005B
     912:	0f 92       	push	r0
     914:	2f 93       	push	r18
     916:	3f 93       	push	r19
     918:	4f 93       	push	r20
     91a:	5f 93       	push	r21
     91c:	6f 93       	push	r22
     91e:	7f 93       	push	r23
     920:	8f 93       	push	r24
     922:	9f 93       	push	r25
     924:	af 93       	push	r26
     926:	bf 93       	push	r27
     928:	ef 93       	push	r30
     92a:	ff 93       	push	r31
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
    Serial._rx_complete_irq();
     934:	84 e4       	ldi	r24, 0x44	; 68
     936:	92 e0       	ldi	r25, 0x02	; 2
     938:	8f df       	rcall	.-226    	; 0x858 <_ZN14HardwareSerial16_rx_complete_irqEv>
  }
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	ff 91       	pop	r31
     940:	ef 91       	pop	r30
     942:	bf 91       	pop	r27
     944:	af 91       	pop	r26
     946:	9f 91       	pop	r25
     948:	8f 91       	pop	r24
     94a:	7f 91       	pop	r23
     94c:	6f 91       	pop	r22
     94e:	5f 91       	pop	r21
     950:	4f 91       	pop	r20
     952:	3f 91       	pop	r19
     954:	2f 91       	pop	r18
     956:	0f 90       	pop	r0
     958:	00 92 5b 00 	sts	0x005B, r0
     95c:	0f 90       	pop	r0
     95e:	00 92 5f 00 	sts	0x005F, r0
     962:	0f 90       	pop	r0
     964:	1f 90       	pop	r1
     966:	18 95       	reti

00000968 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     968:	1f 92       	push	r1
     96a:	0f 92       	push	r0
     96c:	00 90 5f 00 	lds	r0, 0x005F
     970:	0f 92       	push	r0
     972:	11 24       	eor	r1, r1
     974:	00 90 5b 00 	lds	r0, 0x005B
     978:	0f 92       	push	r0
     97a:	2f 93       	push	r18
     97c:	3f 93       	push	r19
     97e:	4f 93       	push	r20
     980:	5f 93       	push	r21
     982:	6f 93       	push	r22
     984:	7f 93       	push	r23
     986:	8f 93       	push	r24
     988:	9f 93       	push	r25
     98a:	af 93       	push	r26
     98c:	bf 93       	push	r27
     98e:	ef 93       	push	r30
     990:	ff 93       	push	r31
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	cd b7       	in	r28, 0x3d	; 61
     998:	de b7       	in	r29, 0x3e	; 62
  Serial._tx_udr_empty_irq();
     99a:	84 e4       	ldi	r24, 0x44	; 68
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	b6 dc       	rcall	.-1684   	; 0x30c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	bf 91       	pop	r27
     9aa:	af 91       	pop	r26
     9ac:	9f 91       	pop	r25
     9ae:	8f 91       	pop	r24
     9b0:	7f 91       	pop	r23
     9b2:	6f 91       	pop	r22
     9b4:	5f 91       	pop	r21
     9b6:	4f 91       	pop	r20
     9b8:	3f 91       	pop	r19
     9ba:	2f 91       	pop	r18
     9bc:	0f 90       	pop	r0
     9be:	00 92 5b 00 	sts	0x005B, r0
     9c2:	0f 90       	pop	r0
     9c4:	00 92 5f 00 	sts	0x005F, r0
     9c8:	0f 90       	pop	r0
     9ca:	1f 90       	pop	r1
     9cc:	18 95       	reti

000009ce <_Z17Serial0_availablev>:
  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
  return Serial.available();
     9d6:	84 e4       	ldi	r24, 0x44	; 68
     9d8:	92 e0       	ldi	r25, 0x02	; 2
     9da:	fc dc       	rcall	.-1544   	; 0x3d4 <_ZN14HardwareSerial9availableEv>
     9dc:	21 e0       	ldi	r18, 0x01	; 1
     9de:	00 97       	sbiw	r24, 0x00	; 0
     9e0:	09 f4       	brne	.+2      	; 0x9e4 <_Z17Serial0_availablev+0x16>
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	82 2f       	mov	r24, r18
}
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <_Z41__static_initialization_and_destruction_0ii>:
     9ec:	cf 92       	push	r12
     9ee:	df 92       	push	r13
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	00 d0       	rcall	.+0      	; 0x9fe <_Z41__static_initialization_and_destruction_0ii+0x12>
     9fe:	1f 92       	push	r1
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	9a 83       	std	Y+2, r25	; 0x02
     a06:	89 83       	std	Y+1, r24	; 0x01
     a08:	7c 83       	std	Y+4, r23	; 0x04
     a0a:	6b 83       	std	Y+3, r22	; 0x03
     a0c:	89 81       	ldd	r24, Y+1	; 0x01
     a0e:	9a 81       	ldd	r25, Y+2	; 0x02
     a10:	81 30       	cpi	r24, 0x01	; 1
     a12:	91 05       	cpc	r25, r1
     a14:	d9 f4       	brne	.+54     	; 0xa4c <_Z41__static_initialization_and_destruction_0ii+0x60>
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	9c 81       	ldd	r25, Y+4	; 0x04
     a1a:	8f 3f       	cpi	r24, 0xFF	; 255
     a1c:	2f ef       	ldi	r18, 0xFF	; 255
     a1e:	92 07       	cpc	r25, r18
     a20:	a9 f4       	brne	.+42     	; 0xa4c <_Z41__static_initialization_and_destruction_0ii+0x60>
}

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR);
#else
  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);
     a22:	0f 2e       	mov	r0, r31
     a24:	f6 ec       	ldi	r31, 0xC6	; 198
     a26:	cf 2e       	mov	r12, r31
     a28:	d1 2c       	mov	r13, r1
     a2a:	f0 2d       	mov	r31, r0
     a2c:	0f 2e       	mov	r0, r31
     a2e:	f2 ec       	ldi	r31, 0xC2	; 194
     a30:	ef 2e       	mov	r14, r31
     a32:	f1 2c       	mov	r15, r1
     a34:	f0 2d       	mov	r31, r0
     a36:	01 ec       	ldi	r16, 0xC1	; 193
     a38:	10 e0       	ldi	r17, 0x00	; 0
     a3a:	20 ec       	ldi	r18, 0xC0	; 192
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	44 ec       	ldi	r20, 0xC4	; 196
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	65 ec       	ldi	r22, 0xC5	; 197
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	84 e4       	ldi	r24, 0x44	; 68
     a48:	92 e0       	ldi	r25, 0x02	; 2
     a4a:	95 de       	rcall	.-726    	; 0x776 <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	08 95       	ret

00000a66 <_GLOBAL__sub_I___vector_25>:
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
     a6e:	6f ef       	ldi	r22, 0xFF	; 255
     a70:	7f ef       	ldi	r23, 0xFF	; 255
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	ba df       	rcall	.-140    	; 0x9ec <_Z41__static_initialization_and_destruction_0ii>
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     a7e:	1f 92       	push	r1
     a80:	0f 92       	push	r0
     a82:	00 90 5f 00 	lds	r0, 0x005F
     a86:	0f 92       	push	r0
     a88:	11 24       	eor	r1, r1
     a8a:	00 90 5b 00 	lds	r0, 0x005B
     a8e:	0f 92       	push	r0
     a90:	2f 93       	push	r18
     a92:	3f 93       	push	r19
     a94:	4f 93       	push	r20
     a96:	5f 93       	push	r21
     a98:	6f 93       	push	r22
     a9a:	7f 93       	push	r23
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
  Serial1._rx_complete_irq();
     ab0:	81 ee       	ldi	r24, 0xE1	; 225
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	d1 de       	rcall	.-606    	; 0x858 <_ZN14HardwareSerial16_rx_complete_irqEv>
}
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	ff 91       	pop	r31
     abc:	ef 91       	pop	r30
     abe:	bf 91       	pop	r27
     ac0:	af 91       	pop	r26
     ac2:	9f 91       	pop	r25
     ac4:	8f 91       	pop	r24
     ac6:	7f 91       	pop	r23
     ac8:	6f 91       	pop	r22
     aca:	5f 91       	pop	r21
     acc:	4f 91       	pop	r20
     ace:	3f 91       	pop	r19
     ad0:	2f 91       	pop	r18
     ad2:	0f 90       	pop	r0
     ad4:	00 92 5b 00 	sts	0x005B, r0
     ad8:	0f 90       	pop	r0
     ada:	00 92 5f 00 	sts	0x005F, r0
     ade:	0f 90       	pop	r0
     ae0:	1f 90       	pop	r1
     ae2:	18 95       	reti

00000ae4 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     ae4:	1f 92       	push	r1
     ae6:	0f 92       	push	r0
     ae8:	00 90 5f 00 	lds	r0, 0x005F
     aec:	0f 92       	push	r0
     aee:	11 24       	eor	r1, r1
     af0:	00 90 5b 00 	lds	r0, 0x005B
     af4:	0f 92       	push	r0
     af6:	2f 93       	push	r18
     af8:	3f 93       	push	r19
     afa:	4f 93       	push	r20
     afc:	5f 93       	push	r21
     afe:	6f 93       	push	r22
     b00:	7f 93       	push	r23
     b02:	8f 93       	push	r24
     b04:	9f 93       	push	r25
     b06:	af 93       	push	r26
     b08:	bf 93       	push	r27
     b0a:	ef 93       	push	r30
     b0c:	ff 93       	push	r31
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
  Serial1._tx_udr_empty_irq();
     b16:	81 ee       	ldi	r24, 0xE1	; 225
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	f8 db       	rcall	.-2064   	; 0x30c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	ff 91       	pop	r31
     b22:	ef 91       	pop	r30
     b24:	bf 91       	pop	r27
     b26:	af 91       	pop	r26
     b28:	9f 91       	pop	r25
     b2a:	8f 91       	pop	r24
     b2c:	7f 91       	pop	r23
     b2e:	6f 91       	pop	r22
     b30:	5f 91       	pop	r21
     b32:	4f 91       	pop	r20
     b34:	3f 91       	pop	r19
     b36:	2f 91       	pop	r18
     b38:	0f 90       	pop	r0
     b3a:	00 92 5b 00 	sts	0x005B, r0
     b3e:	0f 90       	pop	r0
     b40:	00 92 5f 00 	sts	0x005F, r0
     b44:	0f 90       	pop	r0
     b46:	1f 90       	pop	r1
     b48:	18 95       	reti

00000b4a <_Z17Serial1_availablev>:

HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
  return Serial1.available();
     b52:	81 ee       	ldi	r24, 0xE1	; 225
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	3e dc       	rcall	.-1924   	; 0x3d4 <_ZN14HardwareSerial9availableEv>
     b58:	21 e0       	ldi	r18, 0x01	; 1
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	09 f4       	brne	.+2      	; 0xb60 <_Z17Serial1_availablev+0x16>
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	82 2f       	mov	r24, r18
}
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <_Z41__static_initialization_and_destruction_0ii>:
     b68:	cf 92       	push	r12
     b6a:	df 92       	push	r13
     b6c:	ef 92       	push	r14
     b6e:	ff 92       	push	r15
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	00 d0       	rcall	.+0      	; 0xb7a <_Z41__static_initialization_and_destruction_0ii+0x12>
     b7a:	1f 92       	push	r1
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01
     b84:	7c 83       	std	Y+4, r23	; 0x04
     b86:	6b 83       	std	Y+3, r22	; 0x03
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	9a 81       	ldd	r25, Y+2	; 0x02
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	91 05       	cpc	r25, r1
     b90:	d9 f4       	brne	.+54     	; 0xbc8 <_Z41__static_initialization_and_destruction_0ii+0x60>
     b92:	8b 81       	ldd	r24, Y+3	; 0x03
     b94:	9c 81       	ldd	r25, Y+4	; 0x04
     b96:	8f 3f       	cpi	r24, 0xFF	; 255
     b98:	2f ef       	ldi	r18, 0xFF	; 255
     b9a:	92 07       	cpc	r25, r18
     b9c:	a9 f4       	brne	.+42     	; 0xbc8 <_Z41__static_initialization_and_destruction_0ii+0x60>
#endif
{
  Serial1._tx_udr_empty_irq();
}

HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);
     b9e:	0f 2e       	mov	r0, r31
     ba0:	fe ec       	ldi	r31, 0xCE	; 206
     ba2:	cf 2e       	mov	r12, r31
     ba4:	d1 2c       	mov	r13, r1
     ba6:	f0 2d       	mov	r31, r0
     ba8:	0f 2e       	mov	r0, r31
     baa:	fa ec       	ldi	r31, 0xCA	; 202
     bac:	ef 2e       	mov	r14, r31
     bae:	f1 2c       	mov	r15, r1
     bb0:	f0 2d       	mov	r31, r0
     bb2:	09 ec       	ldi	r16, 0xC9	; 201
     bb4:	10 e0       	ldi	r17, 0x00	; 0
     bb6:	28 ec       	ldi	r18, 0xC8	; 200
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	4c ec       	ldi	r20, 0xCC	; 204
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	6d ec       	ldi	r22, 0xCD	; 205
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	81 ee       	ldi	r24, 0xE1	; 225
     bc4:	92 e0       	ldi	r25, 0x02	; 2
     bc6:	d7 dd       	rcall	.-1106   	; 0x776 <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	cf 90       	pop	r12
     be0:	08 95       	ret

00000be2 <_GLOBAL__sub_I___vector_36>:
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	6f ef       	ldi	r22, 0xFF	; 255
     bec:	7f ef       	ldi	r23, 0xFF	; 255
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	ba df       	rcall	.-140    	; 0xb68 <_Z41__static_initialization_and_destruction_0ii>
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <__vector_51>:
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
     bfa:	1f 92       	push	r1
     bfc:	0f 92       	push	r0
     bfe:	00 90 5f 00 	lds	r0, 0x005F
     c02:	0f 92       	push	r0
     c04:	11 24       	eor	r1, r1
     c06:	00 90 5b 00 	lds	r0, 0x005B
     c0a:	0f 92       	push	r0
     c0c:	2f 93       	push	r18
     c0e:	3f 93       	push	r19
     c10:	4f 93       	push	r20
     c12:	5f 93       	push	r21
     c14:	6f 93       	push	r22
     c16:	7f 93       	push	r23
     c18:	8f 93       	push	r24
     c1a:	9f 93       	push	r25
     c1c:	af 93       	push	r26
     c1e:	bf 93       	push	r27
     c20:	ef 93       	push	r30
     c22:	ff 93       	push	r31
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
  Serial2._rx_complete_irq();
     c2c:	8e e7       	ldi	r24, 0x7E	; 126
     c2e:	93 e0       	ldi	r25, 0x03	; 3
     c30:	13 de       	rcall	.-986    	; 0x858 <_ZN14HardwareSerial16_rx_complete_irqEv>
}
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	ff 91       	pop	r31
     c38:	ef 91       	pop	r30
     c3a:	bf 91       	pop	r27
     c3c:	af 91       	pop	r26
     c3e:	9f 91       	pop	r25
     c40:	8f 91       	pop	r24
     c42:	7f 91       	pop	r23
     c44:	6f 91       	pop	r22
     c46:	5f 91       	pop	r21
     c48:	4f 91       	pop	r20
     c4a:	3f 91       	pop	r19
     c4c:	2f 91       	pop	r18
     c4e:	0f 90       	pop	r0
     c50:	00 92 5b 00 	sts	0x005B, r0
     c54:	0f 90       	pop	r0
     c56:	00 92 5f 00 	sts	0x005F, r0
     c5a:	0f 90       	pop	r0
     c5c:	1f 90       	pop	r1
     c5e:	18 95       	reti

00000c60 <__vector_52>:

ISR(USART2_UDRE_vect)
{
     c60:	1f 92       	push	r1
     c62:	0f 92       	push	r0
     c64:	00 90 5f 00 	lds	r0, 0x005F
     c68:	0f 92       	push	r0
     c6a:	11 24       	eor	r1, r1
     c6c:	00 90 5b 00 	lds	r0, 0x005B
     c70:	0f 92       	push	r0
     c72:	2f 93       	push	r18
     c74:	3f 93       	push	r19
     c76:	4f 93       	push	r20
     c78:	5f 93       	push	r21
     c7a:	6f 93       	push	r22
     c7c:	7f 93       	push	r23
     c7e:	8f 93       	push	r24
     c80:	9f 93       	push	r25
     c82:	af 93       	push	r26
     c84:	bf 93       	push	r27
     c86:	ef 93       	push	r30
     c88:	ff 93       	push	r31
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
  Serial2._tx_udr_empty_irq();
     c92:	8e e7       	ldi	r24, 0x7E	; 126
     c94:	93 e0       	ldi	r25, 0x03	; 3
     c96:	3a db       	rcall	.-2444   	; 0x30c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	ff 91       	pop	r31
     c9e:	ef 91       	pop	r30
     ca0:	bf 91       	pop	r27
     ca2:	af 91       	pop	r26
     ca4:	9f 91       	pop	r25
     ca6:	8f 91       	pop	r24
     ca8:	7f 91       	pop	r23
     caa:	6f 91       	pop	r22
     cac:	5f 91       	pop	r21
     cae:	4f 91       	pop	r20
     cb0:	3f 91       	pop	r19
     cb2:	2f 91       	pop	r18
     cb4:	0f 90       	pop	r0
     cb6:	00 92 5b 00 	sts	0x005B, r0
     cba:	0f 90       	pop	r0
     cbc:	00 92 5f 00 	sts	0x005F, r0
     cc0:	0f 90       	pop	r0
     cc2:	1f 90       	pop	r1
     cc4:	18 95       	reti

00000cc6 <_Z17Serial2_availablev>:

HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
  return Serial2.available();
     cce:	8e e7       	ldi	r24, 0x7E	; 126
     cd0:	93 e0       	ldi	r25, 0x03	; 3
     cd2:	80 db       	rcall	.-2304   	; 0x3d4 <_ZN14HardwareSerial9availableEv>
     cd4:	21 e0       	ldi	r18, 0x01	; 1
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	09 f4       	brne	.+2      	; 0xcdc <_Z17Serial2_availablev+0x16>
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	82 2f       	mov	r24, r18
}
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <_Z41__static_initialization_and_destruction_0ii>:
     ce4:	cf 92       	push	r12
     ce6:	df 92       	push	r13
     ce8:	ef 92       	push	r14
     cea:	ff 92       	push	r15
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <_Z41__static_initialization_and_destruction_0ii+0x12>
     cf6:	1f 92       	push	r1
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	9a 83       	std	Y+2, r25	; 0x02
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	7c 83       	std	Y+4, r23	; 0x04
     d02:	6b 83       	std	Y+3, r22	; 0x03
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	9a 81       	ldd	r25, Y+2	; 0x02
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	91 05       	cpc	r25, r1
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <_Z41__static_initialization_and_destruction_0ii+0x60>
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	9c 81       	ldd	r25, Y+4	; 0x04
     d12:	8f 3f       	cpi	r24, 0xFF	; 255
     d14:	2f ef       	ldi	r18, 0xFF	; 255
     d16:	92 07       	cpc	r25, r18
     d18:	a9 f4       	brne	.+42     	; 0xd44 <_Z41__static_initialization_and_destruction_0ii+0x60>
ISR(USART2_UDRE_vect)
{
  Serial2._tx_udr_empty_irq();
}

HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);
     d1a:	0f 2e       	mov	r0, r31
     d1c:	f6 ed       	ldi	r31, 0xD6	; 214
     d1e:	cf 2e       	mov	r12, r31
     d20:	d1 2c       	mov	r13, r1
     d22:	f0 2d       	mov	r31, r0
     d24:	0f 2e       	mov	r0, r31
     d26:	f2 ed       	ldi	r31, 0xD2	; 210
     d28:	ef 2e       	mov	r14, r31
     d2a:	f1 2c       	mov	r15, r1
     d2c:	f0 2d       	mov	r31, r0
     d2e:	01 ed       	ldi	r16, 0xD1	; 209
     d30:	10 e0       	ldi	r17, 0x00	; 0
     d32:	20 ed       	ldi	r18, 0xD0	; 208
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	44 ed       	ldi	r20, 0xD4	; 212
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	65 ed       	ldi	r22, 0xD5	; 213
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	8e e7       	ldi	r24, 0x7E	; 126
     d40:	93 e0       	ldi	r25, 0x03	; 3
     d42:	19 dd       	rcall	.-1486   	; 0x776 <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	ff 90       	pop	r15
     d56:	ef 90       	pop	r14
     d58:	df 90       	pop	r13
     d5a:	cf 90       	pop	r12
     d5c:	08 95       	ret

00000d5e <_GLOBAL__sub_I___vector_51>:
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	6f ef       	ldi	r22, 0xFF	; 255
     d68:	7f ef       	ldi	r23, 0xFF	; 255
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	ba df       	rcall	.-140    	; 0xce4 <_Z41__static_initialization_and_destruction_0ii>
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
     d76:	1f 92       	push	r1
     d78:	0f 92       	push	r0
     d7a:	00 90 5f 00 	lds	r0, 0x005F
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	00 90 5b 00 	lds	r0, 0x005B
     d86:	0f 92       	push	r0
     d88:	2f 93       	push	r18
     d8a:	3f 93       	push	r19
     d8c:	4f 93       	push	r20
     d8e:	5f 93       	push	r21
     d90:	6f 93       	push	r22
     d92:	7f 93       	push	r23
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
  Serial3._rx_complete_irq();
     da8:	8b e1       	ldi	r24, 0x1B	; 27
     daa:	94 e0       	ldi	r25, 0x04	; 4
     dac:	55 dd       	rcall	.-1366   	; 0x858 <_ZN14HardwareSerial16_rx_complete_irqEv>
}
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	7f 91       	pop	r23
     dc0:	6f 91       	pop	r22
     dc2:	5f 91       	pop	r21
     dc4:	4f 91       	pop	r20
     dc6:	3f 91       	pop	r19
     dc8:	2f 91       	pop	r18
     dca:	0f 90       	pop	r0
     dcc:	00 92 5b 00 	sts	0x005B, r0
     dd0:	0f 90       	pop	r0
     dd2:	00 92 5f 00 	sts	0x005F, r0
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti

00000ddc <__vector_55>:

ISR(USART3_UDRE_vect)
{
     ddc:	1f 92       	push	r1
     dde:	0f 92       	push	r0
     de0:	00 90 5f 00 	lds	r0, 0x005F
     de4:	0f 92       	push	r0
     de6:	11 24       	eor	r1, r1
     de8:	00 90 5b 00 	lds	r0, 0x005B
     dec:	0f 92       	push	r0
     dee:	2f 93       	push	r18
     df0:	3f 93       	push	r19
     df2:	4f 93       	push	r20
     df4:	5f 93       	push	r21
     df6:	6f 93       	push	r22
     df8:	7f 93       	push	r23
     dfa:	8f 93       	push	r24
     dfc:	9f 93       	push	r25
     dfe:	af 93       	push	r26
     e00:	bf 93       	push	r27
     e02:	ef 93       	push	r30
     e04:	ff 93       	push	r31
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
  Serial3._tx_udr_empty_irq();
     e0e:	8b e1       	ldi	r24, 0x1B	; 27
     e10:	94 e0       	ldi	r25, 0x04	; 4
     e12:	7c da       	rcall	.-2824   	; 0x30c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	00 92 5b 00 	sts	0x005B, r0
     e36:	0f 90       	pop	r0
     e38:	00 92 5f 00 	sts	0x005F, r0
     e3c:	0f 90       	pop	r0
     e3e:	1f 90       	pop	r1
     e40:	18 95       	reti

00000e42 <_Z17Serial3_availablev>:

HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
  return Serial3.available();
     e4a:	8b e1       	ldi	r24, 0x1B	; 27
     e4c:	94 e0       	ldi	r25, 0x04	; 4
     e4e:	c2 da       	rcall	.-2684   	; 0x3d4 <_ZN14HardwareSerial9availableEv>
     e50:	21 e0       	ldi	r18, 0x01	; 1
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	09 f4       	brne	.+2      	; 0xe58 <_Z17Serial3_availablev+0x16>
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	82 2f       	mov	r24, r18
}
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <_Z41__static_initialization_and_destruction_0ii>:
     e60:	cf 92       	push	r12
     e62:	df 92       	push	r13
     e64:	ef 92       	push	r14
     e66:	ff 92       	push	r15
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	00 d0       	rcall	.+0      	; 0xe72 <_Z41__static_initialization_and_destruction_0ii+0x12>
     e72:	1f 92       	push	r1
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	9a 83       	std	Y+2, r25	; 0x02
     e7a:	89 83       	std	Y+1, r24	; 0x01
     e7c:	7c 83       	std	Y+4, r23	; 0x04
     e7e:	6b 83       	std	Y+3, r22	; 0x03
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	9a 81       	ldd	r25, Y+2	; 0x02
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	91 05       	cpc	r25, r1
     e88:	e9 f4       	brne	.+58     	; 0xec4 <_Z41__static_initialization_and_destruction_0ii+0x64>
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	9c 81       	ldd	r25, Y+4	; 0x04
     e8e:	8f 3f       	cpi	r24, 0xFF	; 255
     e90:	2f ef       	ldi	r18, 0xFF	; 255
     e92:	92 07       	cpc	r25, r18
     e94:	b9 f4       	brne	.+46     	; 0xec4 <_Z41__static_initialization_and_destruction_0ii+0x64>
ISR(USART3_UDRE_vect)
{
  Serial3._tx_udr_empty_irq();
}

HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);
     e96:	0f 2e       	mov	r0, r31
     e98:	f6 e3       	ldi	r31, 0x36	; 54
     e9a:	cf 2e       	mov	r12, r31
     e9c:	dd 24       	eor	r13, r13
     e9e:	d3 94       	inc	r13
     ea0:	f0 2d       	mov	r31, r0
     ea2:	0f 2e       	mov	r0, r31
     ea4:	f2 e3       	ldi	r31, 0x32	; 50
     ea6:	ef 2e       	mov	r14, r31
     ea8:	ff 24       	eor	r15, r15
     eaa:	f3 94       	inc	r15
     eac:	f0 2d       	mov	r31, r0
     eae:	01 e3       	ldi	r16, 0x31	; 49
     eb0:	11 e0       	ldi	r17, 0x01	; 1
     eb2:	20 e3       	ldi	r18, 0x30	; 48
     eb4:	31 e0       	ldi	r19, 0x01	; 1
     eb6:	44 e3       	ldi	r20, 0x34	; 52
     eb8:	51 e0       	ldi	r21, 0x01	; 1
     eba:	65 e3       	ldi	r22, 0x35	; 53
     ebc:	71 e0       	ldi	r23, 0x01	; 1
     ebe:	8b e1       	ldi	r24, 0x1B	; 27
     ec0:	94 e0       	ldi	r25, 0x04	; 4
     ec2:	59 dc       	rcall	.-1870   	; 0x776 <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	df 90       	pop	r13
     eda:	cf 90       	pop	r12
     edc:	08 95       	ret

00000ede <_GLOBAL__sub_I___vector_54>:
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	6f ef       	ldi	r22, 0xFF	; 255
     ee8:	7f ef       	ldi	r23, 0xFF	; 255
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	b8 df       	rcall	.-144    	; 0xe60 <_Z41__static_initialization_and_destruction_0ii>
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <_ZN9PrintableC1Ev>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	1f 92       	push	r1
     efc:	1f 92       	push	r1
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	29 e3       	ldi	r18, 0x39	; 57
     f0c:	32 e0       	ldi	r19, 0x02	; 2
     f0e:	fc 01       	movw	r30, r24
     f10:	31 83       	std	Z+1, r19	; 0x01
     f12:	20 83       	st	Z, r18
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <_ZN9IPAddressC1Ehhhh>:
     f1e:	0f 93       	push	r16
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	00 d0       	rcall	.+0      	; 0xf26 <_ZN9IPAddressC1Ehhhh+0x8>
     f26:	00 d0       	rcall	.+0      	; 0xf28 <_ZN9IPAddressC1Ehhhh+0xa>
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	6b 83       	std	Y+3, r22	; 0x03
     f32:	4c 83       	std	Y+4, r20	; 0x04
     f34:	2d 83       	std	Y+5, r18	; 0x05
     f36:	0e 83       	std	Y+6, r16	; 0x06
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	dc df       	rcall	.-72     	; 0xef6 <_ZN9PrintableC1Ev>
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	23 e3       	ldi	r18, 0x33	; 51
     f44:	32 e0       	ldi	r19, 0x02	; 2
     f46:	fc 01       	movw	r30, r24
     f48:	31 83       	std	Z+1, r19	; 0x01
     f4a:	20 83       	st	Z, r18
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	2b 81       	ldd	r18, Y+3	; 0x03
     f52:	fc 01       	movw	r30, r24
     f54:	22 83       	std	Z+2, r18	; 0x02
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	2c 81       	ldd	r18, Y+4	; 0x04
     f5c:	fc 01       	movw	r30, r24
     f5e:	23 83       	std	Z+3, r18	; 0x03
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	2d 81       	ldd	r18, Y+5	; 0x05
     f66:	fc 01       	movw	r30, r24
     f68:	24 83       	std	Z+4, r18	; 0x04
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	2e 81       	ldd	r18, Y+6	; 0x06
     f70:	fc 01       	movw	r30, r24
     f72:	25 83       	std	Z+5, r18	; 0x05
     f74:	26 96       	adiw	r28, 0x06	; 6
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	0f 91       	pop	r16
     f86:	08 95       	ret

00000f88 <_ZNK9IPAddress7printToER5Print>:

size_t IPAddress::printTo(Print& p) const
{
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	28 97       	sbiw	r28, 0x08	; 8
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	9e 83       	std	Y+6, r25	; 0x06
     f9e:	8d 83       	std	Y+5, r24	; 0x05
     fa0:	78 87       	std	Y+8, r23	; 0x08
     fa2:	6f 83       	std	Y+7, r22	; 0x07
    size_t n = 0;
     fa4:	1a 82       	std	Y+2, r1	; 0x02
     fa6:	19 82       	std	Y+1, r1	; 0x01
    for (int i =0; i < 3; i++)
     fa8:	1c 82       	std	Y+4, r1	; 0x04
     faa:	1b 82       	std	Y+3, r1	; 0x03
     fac:	24 c0       	rjmp	.+72     	; 0xff6 <_ZNK9IPAddress7printToER5Print+0x6e>
    {
        n += p.print(_address.bytes[i], DEC);
     fae:	2d 81       	ldd	r18, Y+5	; 0x05
     fb0:	3e 81       	ldd	r19, Y+6	; 0x06
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	82 0f       	add	r24, r18
     fb8:	93 1f       	adc	r25, r19
     fba:	02 96       	adiw	r24, 0x02	; 2
     fbc:	fc 01       	movw	r30, r24
     fbe:	20 81       	ld	r18, Z
     fc0:	8f 81       	ldd	r24, Y+7	; 0x07
     fc2:	98 85       	ldd	r25, Y+8	; 0x08
     fc4:	4a e0       	ldi	r20, 0x0A	; 10
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	62 2f       	mov	r22, r18
     fca:	82 d6       	rcall	.+3332   	; 0x1cd0 <_ZN5Print5printEhi>
     fcc:	29 81       	ldd	r18, Y+1	; 0x01
     fce:	3a 81       	ldd	r19, Y+2	; 0x02
     fd0:	82 0f       	add	r24, r18
     fd2:	93 1f       	adc	r25, r19
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	89 83       	std	Y+1, r24	; 0x01
        n += p.print('.');
     fd8:	8f 81       	ldd	r24, Y+7	; 0x07
     fda:	98 85       	ldd	r25, Y+8	; 0x08
     fdc:	6e e2       	ldi	r22, 0x2E	; 46
     fde:	5d d6       	rcall	.+3258   	; 0x1c9a <_ZN5Print5printEc>
     fe0:	29 81       	ldd	r18, Y+1	; 0x01
     fe2:	3a 81       	ldd	r19, Y+2	; 0x02
     fe4:	82 0f       	add	r24, r18
     fe6:	93 1f       	adc	r25, r19
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	89 83       	std	Y+1, r24	; 0x01
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	9c 83       	std	Y+4, r25	; 0x04
     ff4:	8b 83       	std	Y+3, r24	; 0x03
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	83 30       	cpi	r24, 0x03	; 3
     ffc:	91 05       	cpc	r25, r1
     ffe:	bc f2       	brlt	.-82     	; 0xfae <_ZNK9IPAddress7printToER5Print+0x26>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    1000:	8d 81       	ldd	r24, Y+5	; 0x05
    1002:	9e 81       	ldd	r25, Y+6	; 0x06
    1004:	fc 01       	movw	r30, r24
    1006:	25 81       	ldd	r18, Z+5	; 0x05
    1008:	8f 81       	ldd	r24, Y+7	; 0x07
    100a:	98 85       	ldd	r25, Y+8	; 0x08
    100c:	4a e0       	ldi	r20, 0x0A	; 10
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	62 2f       	mov	r22, r18
    1012:	5e d6       	rcall	.+3260   	; 0x1cd0 <_ZN5Print5printEhi>
    1014:	29 81       	ldd	r18, Y+1	; 0x01
    1016:	3a 81       	ldd	r19, Y+2	; 0x02
    1018:	82 0f       	add	r24, r18
    101a:	93 1f       	adc	r25, r19
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01
    return n;
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1024:	28 96       	adiw	r28, 0x08	; 8
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	08 95       	ret

00001036 <_Z41__static_initialization_and_destruction_0ii>:
    1036:	0f 93       	push	r16
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	00 d0       	rcall	.+0      	; 0x103e <_Z41__static_initialization_and_destruction_0ii+0x8>
    103e:	1f 92       	push	r1
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	7c 83       	std	Y+4, r23	; 0x04
    104a:	6b 83       	std	Y+3, r22	; 0x03
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	9a 81       	ldd	r25, Y+2	; 0x02
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	91 05       	cpc	r25, r1
    1054:	69 f4       	brne	.+26     	; 0x1070 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	8f 3f       	cpi	r24, 0xFF	; 255
    105c:	2f ef       	ldi	r18, 0xFF	; 255
    105e:	92 07       	cpc	r25, r18
    1060:	39 f4       	brne	.+14     	; 0x1070 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    1062:	00 e0       	ldi	r16, 0x00	; 0
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	88 eb       	ldi	r24, 0xB8	; 184
    106c:	94 e0       	ldi	r25, 0x04	; 4
    106e:	57 df       	rcall	.-338    	; 0xf1e <_ZN9IPAddressC1Ehhhh>
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	0f 91       	pop	r16
    107e:	08 95       	ret

00001080 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	6f ef       	ldi	r22, 0xFF	; 255
    108a:	7f ef       	ldi	r23, 0xFF	; 255
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	d2 df       	rcall	.-92     	; 0x1036 <_Z41__static_initialization_and_destruction_0ii>
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret

000010a6 <main>:

int main(void)
{
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
	init();
    10ae:	0e 94 15 13 	call	0x262a	; 0x262a <init>

	initVariant();
    10b2:	f2 df       	rcall	.-28     	; 0x1098 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	vKernel_Initial();
    10b4:	b4 d2       	rcall	.+1384   	; 0x161e <vKernel_Initial>
	setup();
    10b6:	ee d6       	rcall	.+3548   	; 0x1e94 <setup>
    
	for (;;) {
		loop();
    10b8:	45 d7       	rcall	.+3722   	; 0x1f44 <loop>
		if (serialEventRun) serialEventRun();
    10ba:	87 e3       	ldi	r24, 0x37	; 55
    10bc:	91 e0       	ldi	r25, 0x01	; 1
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <main+0x1e>
    10c2:	d5 d8       	rcall	.-3670   	; 0x26e <_Z14serialEventRunv>
// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

int main(void)
    10c4:	f9 cf       	rjmp	.-14     	; 0x10b8 <main+0x12>

000010c6 <vAlarmClock_Init>:
	U8 flagReg = ucEnter_Critical();
	vNode_Remove((node_t *) pxAlarmClock);
    vExit_Critical(flagReg);
    vFree(pxAlarmClock);
	return PASS;
}
    10c6:	cf 92       	push	r12
    10c8:	ef 92       	push	r14
    10ca:	ff 92       	push	r15
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	2d 97       	sbiw	r28, 0x0d	; 13
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	9a 83       	std	Y+2, r25	; 0x02
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	7c 83       	std	Y+4, r23	; 0x04
    10ea:	6b 83       	std	Y+3, r22	; 0x03
    10ec:	5e 83       	std	Y+6, r21	; 0x06
    10ee:	4d 83       	std	Y+5, r20	; 0x05
    10f0:	38 87       	std	Y+8, r19	; 0x08
    10f2:	2f 83       	std	Y+7, r18	; 0x07
    10f4:	e9 86       	std	Y+9, r14	; 0x09
    10f6:	fa 86       	std	Y+10, r15	; 0x0a
    10f8:	0b 87       	std	Y+11, r16	; 0x0b
    10fa:	1c 87       	std	Y+12, r17	; 0x0c
    10fc:	cd 86       	std	Y+13, r12	; 0x0d
    10fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	91 05       	cpc	r25, r1
    1108:	21 f0       	breq	.+8      	; 0x1112 <vAlarmClock_Init+0x4c>
    110a:	83 30       	cpi	r24, 0x03	; 3
    110c:	91 05       	cpc	r25, r1
    110e:	61 f0       	breq	.+24     	; 0x1128 <vAlarmClock_Init+0x62>
    1110:	16 c0       	rjmp	.+44     	; 0x113e <vAlarmClock_Init+0x78>
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	fc 01       	movw	r30, r24
    1118:	84 89       	ldd	r24, Z+20	; 0x14
    111a:	28 2f       	mov	r18, r24
    111c:	2d 7f       	andi	r18, 0xFD	; 253
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	fc 01       	movw	r30, r24
    1124:	24 8b       	std	Z+20, r18	; 0x14
    1126:	0b c0       	rjmp	.+22     	; 0x113e <vAlarmClock_Init+0x78>
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	9a 81       	ldd	r25, Y+2	; 0x02
    112c:	fc 01       	movw	r30, r24
    112e:	84 89       	ldd	r24, Z+20	; 0x14
    1130:	28 2f       	mov	r18, r24
    1132:	22 60       	ori	r18, 0x02	; 2
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	fc 01       	movw	r30, r24
    113a:	24 8b       	std	Z+20, r18	; 0x14
    113c:	00 00       	nop
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	fc 01       	movw	r30, r24
    1144:	11 82       	std	Z+1, r1	; 0x01
    1146:	10 82       	st	Z, r1
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	fc 01       	movw	r30, r24
    114e:	13 82       	std	Z+3, r1	; 0x03
    1150:	12 82       	std	Z+2, r1	; 0x02
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	04 96       	adiw	r24, 0x04	; 4
    1158:	2b 81       	ldd	r18, Y+3	; 0x03
    115a:	3c 81       	ldd	r19, Y+4	; 0x04
    115c:	b9 01       	movw	r22, r18
    115e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <strcpy>
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	9a 81       	ldd	r25, Y+2	; 0x02
    1166:	fc 01       	movw	r30, r24
    1168:	84 89       	ldd	r24, Z+20	; 0x14
    116a:	28 2f       	mov	r18, r24
    116c:	2e 7f       	andi	r18, 0xFE	; 254
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	fc 01       	movw	r30, r24
    1174:	24 8b       	std	Z+20, r18	; 0x14
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	2d 81       	ldd	r18, Y+5	; 0x05
    117c:	3e 81       	ldd	r19, Y+6	; 0x06
    117e:	fc 01       	movw	r30, r24
    1180:	36 8b       	std	Z+22, r19	; 0x16
    1182:	25 8b       	std	Z+21, r18	; 0x15
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	2f 81       	ldd	r18, Y+7	; 0x07
    118a:	38 85       	ldd	r19, Y+8	; 0x08
    118c:	fc 01       	movw	r30, r24
    118e:	30 8f       	std	Z+24, r19	; 0x18
    1190:	27 8b       	std	Z+23, r18	; 0x17
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	9a 81       	ldd	r25, Y+2	; 0x02
    1196:	fc 01       	movw	r30, r24
    1198:	11 a2       	std	Z+33, r1	; 0x21
    119a:	12 a2       	std	Z+34, r1	; 0x22
    119c:	13 a2       	std	Z+35, r1	; 0x23
    119e:	14 a2       	std	Z+36, r1	; 0x24
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	9a 81       	ldd	r25, Y+2	; 0x02
    11a4:	fc 01       	movw	r30, r24
    11a6:	15 8e       	std	Z+29, r1	; 0x1d
    11a8:	16 8e       	std	Z+30, r1	; 0x1e
    11aa:	17 8e       	std	Z+31, r1	; 0x1f
    11ac:	10 a2       	std	Z+32, r1	; 0x20
    11ae:	29 81       	ldd	r18, Y+1	; 0x01
    11b0:	3a 81       	ldd	r19, Y+2	; 0x02
    11b2:	89 85       	ldd	r24, Y+9	; 0x09
    11b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b6:	ab 85       	ldd	r26, Y+11	; 0x0b
    11b8:	bc 85       	ldd	r27, Y+12	; 0x0c
    11ba:	f9 01       	movw	r30, r18
    11bc:	81 8f       	std	Z+25, r24	; 0x19
    11be:	92 8f       	std	Z+26, r25	; 0x1a
    11c0:	a3 8f       	std	Z+27, r26	; 0x1b
    11c2:	b4 8f       	std	Z+28, r27	; 0x1c
    11c4:	2d 96       	adiw	r28, 0x0d	; 13
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	ff 90       	pop	r15
    11da:	ef 90       	pop	r14
    11dc:	cf 90       	pop	r12
    11de:	08 95       	ret

000011e0 <ucAlarmClock_Start>:
    11e0:	cf 92       	push	r12
    11e2:	df 92       	push	r13
    11e4:	ef 92       	push	r14
    11e6:	ff 92       	push	r15
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	27 97       	sbiw	r28, 0x07	; 7
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	9f 83       	std	Y+7, r25	; 0x07
    11fe:	8e 83       	std	Y+6, r24	; 0x06
    1200:	8e 81       	ldd	r24, Y+6	; 0x06
    1202:	9f 81       	ldd	r25, Y+7	; 0x07
    1204:	fc 01       	movw	r30, r24
    1206:	84 89       	ldd	r24, Z+20	; 0x14
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	81 70       	andi	r24, 0x01	; 1
    120e:	99 27       	eor	r25, r25
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	21 f4       	brne	.+8      	; 0x121c <ucAlarmClock_Start+0x3c>
    1214:	8e 81       	ldd	r24, Y+6	; 0x06
    1216:	9f 81       	ldd	r25, Y+7	; 0x07
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	11 f4       	brne	.+4      	; 0x1220 <ucAlarmClock_Start+0x40>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	5d c0       	rjmp	.+186    	; 0x12da <ucAlarmClock_Start+0xfa>
    1220:	8e 81       	ldd	r24, Y+6	; 0x06
    1222:	9f 81       	ldd	r25, Y+7	; 0x07
    1224:	fc 01       	movw	r30, r24
    1226:	c1 8c       	ldd	r12, Z+25	; 0x19
    1228:	d2 8c       	ldd	r13, Z+26	; 0x1a
    122a:	e3 8c       	ldd	r14, Z+27	; 0x1b
    122c:	f4 8c       	ldd	r15, Z+28	; 0x1c
    122e:	01 d2       	rcall	.+1026   	; 0x1632 <pxGet_Current_Tick>
    1230:	bc 01       	movw	r22, r24
    1232:	8e 81       	ldd	r24, Y+6	; 0x06
    1234:	9f 81       	ldd	r25, Y+7	; 0x07
    1236:	4d 96       	adiw	r24, 0x1d	; 29
    1238:	a7 01       	movw	r20, r14
    123a:	96 01       	movw	r18, r12
    123c:	03 d2       	rcall	.+1030   	; 0x1644 <vTick_Inc>
    123e:	11 d3       	rcall	.+1570   	; 0x1862 <ucEnter_Critical>
    1240:	8b 83       	std	Y+3, r24	; 0x03
    1242:	83 ee       	ldi	r24, 0xE3	; 227
    1244:	94 e1       	ldi	r25, 0x14	; 20
    1246:	e9 d3       	rcall	.+2002   	; 0x1a1a <pxQueue_First_Node>
    1248:	9a 83       	std	Y+2, r25	; 0x02
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	83 ee       	ldi	r24, 0xE3	; 227
    124e:	94 e1       	ldi	r25, 0x14	; 20
    1250:	d5 d3       	rcall	.+1962   	; 0x19fc <pxQueue_Head_Node>
    1252:	9d 83       	std	Y+5, r25	; 0x05
    1254:	8c 83       	std	Y+4, r24	; 0x04
    1256:	8e 81       	ldd	r24, Y+6	; 0x06
    1258:	9f 81       	ldd	r25, Y+7	; 0x07
    125a:	37 d4       	rcall	.+2158   	; 0x1aca <vNode_Remove>
    125c:	1d c0       	rjmp	.+58     	; 0x1298 <ucAlarmClock_Start+0xb8>
    125e:	8e 81       	ldd	r24, Y+6	; 0x06
    1260:	9f 81       	ldd	r25, Y+7	; 0x07
    1262:	9c 01       	movw	r18, r24
    1264:	23 5e       	subi	r18, 0xE3	; 227
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	9a 81       	ldd	r25, Y+2	; 0x02
    126c:	4d 96       	adiw	r24, 0x1d	; 29
    126e:	b9 01       	movw	r22, r18
    1270:	4f d2       	rcall	.+1182   	; 0x1710 <scCompare_Tick>
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	51 f4       	brne	.+20     	; 0x128a <ucAlarmClock_Start+0xaa>
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	fc 01       	movw	r30, r24
    127c:	80 81       	ld	r24, Z
    127e:	91 81       	ldd	r25, Z+1	; 0x01
    1280:	2e 81       	ldd	r18, Y+6	; 0x06
    1282:	3f 81       	ldd	r19, Y+7	; 0x07
    1284:	b9 01       	movw	r22, r18
    1286:	5f d4       	rcall	.+2238   	; 0x1b46 <vNode_Insert>
    1288:	0e c0       	rjmp	.+28     	; 0x12a6 <ucAlarmClock_Start+0xc6>
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	fc 01       	movw	r30, r24
    1290:	82 81       	ldd	r24, Z+2	; 0x02
    1292:	93 81       	ldd	r25, Z+3	; 0x03
    1294:	9a 83       	std	Y+2, r25	; 0x02
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	29 81       	ldd	r18, Y+1	; 0x01
    129a:	3a 81       	ldd	r19, Y+2	; 0x02
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	9d 81       	ldd	r25, Y+5	; 0x05
    12a0:	28 17       	cp	r18, r24
    12a2:	39 07       	cpc	r19, r25
    12a4:	e1 f6       	brne	.-72     	; 0x125e <ucAlarmClock_Start+0x7e>
    12a6:	29 81       	ldd	r18, Y+1	; 0x01
    12a8:	3a 81       	ldd	r19, Y+2	; 0x02
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	9d 81       	ldd	r25, Y+5	; 0x05
    12ae:	28 17       	cp	r18, r24
    12b0:	39 07       	cpc	r19, r25
    12b2:	31 f4       	brne	.+12     	; 0x12c0 <ucAlarmClock_Start+0xe0>
    12b4:	8e 81       	ldd	r24, Y+6	; 0x06
    12b6:	9f 81       	ldd	r25, Y+7	; 0x07
    12b8:	bc 01       	movw	r22, r24
    12ba:	83 ee       	ldi	r24, 0xE3	; 227
    12bc:	94 e1       	ldi	r25, 0x14	; 20
    12be:	d1 d3       	rcall	.+1954   	; 0x1a62 <vQueue_Append_Node>
    12c0:	8e 81       	ldd	r24, Y+6	; 0x06
    12c2:	9f 81       	ldd	r25, Y+7	; 0x07
    12c4:	fc 01       	movw	r30, r24
    12c6:	84 89       	ldd	r24, Z+20	; 0x14
    12c8:	28 2f       	mov	r18, r24
    12ca:	21 60       	ori	r18, 0x01	; 1
    12cc:	8e 81       	ldd	r24, Y+6	; 0x06
    12ce:	9f 81       	ldd	r25, Y+7	; 0x07
    12d0:	fc 01       	movw	r30, r24
    12d2:	24 8b       	std	Z+20, r18	; 0x14
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	d5 d2       	rcall	.+1450   	; 0x1882 <vExit_Critical>
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	27 96       	adiw	r28, 0x07	; 7
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	ff 90       	pop	r15
    12ec:	ef 90       	pop	r14
    12ee:	df 90       	pop	r13
    12f0:	cf 90       	pop	r12
    12f2:	08 95       	ret

000012f4 <vAlarmClock_Check>:
 * This function will check AlarmClock list, if a timeout event happens, the
 * corresponding timeout function will be invoked.
 *
 */

void vAlarmClock_Check(void) {
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	29 97       	sbiw	r28, 0x09	; 9
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
	alarmClock_t	*pxCurrentNode, *pxLastNode;
	osTick_t *pxTick,*pxCurrentNodeTick;
	U8 flagReg;
	
	
	pxCurrentNode = (alarmClock_t *)pxQueue_First_Node(&xAlarmClockQueue);
    1308:	83 ee       	ldi	r24, 0xE3	; 227
    130a:	94 e1       	ldi	r25, 0x14	; 20
    130c:	86 d3       	rcall	.+1804   	; 0x1a1a <pxQueue_First_Node>
    130e:	9a 83       	std	Y+2, r25	; 0x02
    1310:	89 83       	std	Y+1, r24	; 0x01
	pxLastNode = (alarmClock_t *)pxQueue_Head_Node(&xAlarmClockQueue);
    1312:	83 ee       	ldi	r24, 0xE3	; 227
    1314:	94 e1       	ldi	r25, 0x14	; 20
    1316:	72 d3       	rcall	.+1764   	; 0x19fc <pxQueue_Head_Node>
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	8b 83       	std	Y+3, r24	; 0x03
	while (pxCurrentNode != pxLastNode) {
    131c:	59 c0       	rjmp	.+178    	; 0x13d0 <vAlarmClock_Check+0xdc>
          pxTick = pxGet_Current_Tick();  
    131e:	89 d1       	rcall	.+786    	; 0x1632 <pxGet_Current_Tick>
    1320:	9e 83       	std	Y+6, r25	; 0x06
    1322:	8d 83       	std	Y+5, r24	; 0x05
		  pxCurrentNodeTick = (osTick_t*)&pxCurrentNode->timeoutTick;
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	9a 81       	ldd	r25, Y+2	; 0x02
    1328:	4d 96       	adiw	r24, 0x1d	; 29
    132a:	98 87       	std	Y+8, r25	; 0x08
    132c:	8f 83       	std	Y+7, r24	; 0x07
		  if (scCompare_Tick(pxTick, pxCurrentNodeTick) >=0) {
    132e:	2f 81       	ldd	r18, Y+7	; 0x07
    1330:	38 85       	ldd	r19, Y+8	; 0x08
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	b9 01       	movw	r22, r18
    1338:	eb d1       	rcall	.+982    	; 0x1710 <scCompare_Tick>
    133a:	88 23       	and	r24, r24
    133c:	0c f4       	brge	.+2      	; 0x1340 <vAlarmClock_Check+0x4c>
    133e:	47 c0       	rjmp	.+142    	; 0x13ce <vAlarmClock_Check+0xda>
				flagReg = ucEnter_Critical();
    1340:	90 d2       	rcall	.+1312   	; 0x1862 <ucEnter_Critical>
    1342:	89 87       	std	Y+9, r24	; 0x09
				vNode_Remove((node_t *)pxCurrentNode);
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	c0 d3       	rcall	.+1920   	; 0x1aca <vNode_Remove>
				vExit_Critical(flagReg);
    134a:	89 85       	ldd	r24, Y+9	; 0x09
    134c:	9a d2       	rcall	.+1332   	; 0x1882 <vExit_Critical>
				/// call timeout function 
				pxCurrentNode->timeoutFunc(pxCurrentNode->parameter);
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	9a 81       	ldd	r25, Y+2	; 0x02
    1352:	fc 01       	movw	r30, r24
    1354:	25 89       	ldd	r18, Z+21	; 0x15
    1356:	36 89       	ldd	r19, Z+22	; 0x16
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	9a 81       	ldd	r25, Y+2	; 0x02
    135c:	fc 01       	movw	r30, r24
    135e:	87 89       	ldd	r24, Z+23	; 0x17
    1360:	90 8d       	ldd	r25, Z+24	; 0x18
    1362:	f9 01       	movw	r30, r18
    1364:	19 95       	eicall

				if ((pxCurrentNode->flag & PERIODIC) && (pxCurrentNode->flag & ACTIVATED)) {  //periodic AlarmClock
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	9a 81       	ldd	r25, Y+2	; 0x02
    136a:	fc 01       	movw	r30, r24
    136c:	84 89       	ldd	r24, Z+20	; 0x14
    136e:	88 2f       	mov	r24, r24
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	82 70       	andi	r24, 0x02	; 2
    1374:	99 27       	eor	r25, r25
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	c1 f0       	breq	.+48     	; 0x13aa <vAlarmClock_Check+0xb6>
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	fc 01       	movw	r30, r24
    1380:	84 89       	ldd	r24, Z+20	; 0x14
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	81 70       	andi	r24, 0x01	; 1
    1388:	99 27       	eor	r25, r25
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	71 f0       	breq	.+28     	; 0x13aa <vAlarmClock_Check+0xb6>
					// restart it 
					pxCurrentNode->flag &= ~ACTIVATED;
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	9a 81       	ldd	r25, Y+2	; 0x02
    1392:	fc 01       	movw	r30, r24
    1394:	84 89       	ldd	r24, Z+20	; 0x14
    1396:	28 2f       	mov	r18, r24
    1398:	2e 7f       	andi	r18, 0xFE	; 254
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	9a 81       	ldd	r25, Y+2	; 0x02
    139e:	fc 01       	movw	r30, r24
    13a0:	24 8b       	std	Z+20, r18	; 0x14
					ucAlarmClock_Start(pxCurrentNode);
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	9a 81       	ldd	r25, Y+2	; 0x02
    13a6:	1c df       	rcall	.-456    	; 0x11e0 <ucAlarmClock_Start>
    13a8:	0a c0       	rjmp	.+20     	; 0x13be <vAlarmClock_Check+0xca>
				} else {
					// stop AlarmClock 
					pxCurrentNode->flag &= ~ACTIVATED;
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	fc 01       	movw	r30, r24
    13b0:	84 89       	ldd	r24, Z+20	; 0x14
    13b2:	28 2f       	mov	r18, r24
    13b4:	2e 7f       	andi	r18, 0xFE	; 254
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ba:	fc 01       	movw	r30, r24
    13bc:	24 8b       	std	Z+20, r18	; 0x14
				}
				//next AlarmClock
				pxCurrentNode = (alarmClock_t *)(((node_t *)pxCurrentNode)->next);
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	9a 81       	ldd	r25, Y+2	; 0x02
    13c2:	fc 01       	movw	r30, r24
    13c4:	82 81       	ldd	r24, Z+2	; 0x02
    13c6:	93 81       	ldd	r25, Z+3	; 0x03
    13c8:	9a 83       	std	Y+2, r25	; 0x02
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <vAlarmClock_Check+0xdc>
			}
			else break;
    13ce:	08 c0       	rjmp	.+16     	; 0x13e0 <vAlarmClock_Check+0xec>
	U8 flagReg;
	
	
	pxCurrentNode = (alarmClock_t *)pxQueue_First_Node(&xAlarmClockQueue);
	pxLastNode = (alarmClock_t *)pxQueue_Head_Node(&xAlarmClockQueue);
	while (pxCurrentNode != pxLastNode) {
    13d0:	29 81       	ldd	r18, Y+1	; 0x01
    13d2:	3a 81       	ldd	r19, Y+2	; 0x02
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	9c 81       	ldd	r25, Y+4	; 0x04
    13d8:	28 17       	cp	r18, r24
    13da:	39 07       	cpc	r19, r25
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <vAlarmClock_Check+0xec>
    13de:	9f cf       	rjmp	.-194    	; 0x131e <vAlarmClock_Check+0x2a>
				//next AlarmClock
				pxCurrentNode = (alarmClock_t *)(((node_t *)pxCurrentNode)->next);
			}
			else break;
		}
}
    13e0:	29 96       	adiw	r28, 0x09	; 9
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	08 95       	ret

000013f2 <vInsert_Block_Into_Heap>:
const Size_t  heapSTRUCT_SIZE = sizeof( xBlockLink_t );
#define heapMINIMUM_BLOCK_SIZE	( ( Size_t ) ( heapSTRUCT_SIZE * 2 ) )
xBlockLink_t xStart;

//sem_t heapSem;
static void vInsert_Block_Into_Heap( xBlockLink_t *pxBlockToInsert ) {																				
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	28 97       	sbiw	r28, 0x08	; 8
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	98 87       	std	Y+8, r25	; 0x08
    1408:	8f 83       	std	Y+7, r24	; 0x07
	xBlockLink_t *q,*p;																
	Size_t size;																	
																					
	size = pxBlockToInsert->size;										
    140a:	8f 81       	ldd	r24, Y+7	; 0x07
    140c:	98 85       	ldd	r25, Y+8	; 0x08
    140e:	fc 01       	movw	r30, r24
    1410:	82 81       	ldd	r24, Z+2	; 0x02
    1412:	93 81       	ldd	r25, Z+3	; 0x03
    1414:	9e 83       	std	Y+6, r25	; 0x06
    1416:	8d 83       	std	Y+5, r24	; 0x05
	/* Iterate through the list until a block is found that has a larger size */	
	/* than the block we are inserting. */		
	q = xStart.pxNextFreeBlock;
    1418:	80 91 df 04 	lds	r24, 0x04DF
    141c:	90 91 e0 04 	lds	r25, 0x04E0
    1420:	9a 83       	std	Y+2, r25	; 0x02
    1422:	89 83       	std	Y+1, r24	; 0x01
	p = &xStart;
    1424:	8f ed       	ldi	r24, 0xDF	; 223
    1426:	94 e0       	ldi	r25, 0x04	; 4
    1428:	9c 83       	std	Y+4, r25	; 0x04
    142a:	8b 83       	std	Y+3, r24	; 0x03
	while(q && q->size < size) {
    142c:	0b c0       	rjmp	.+22     	; 0x1444 <vInsert_Block_Into_Heap+0x52>
		p = q;
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	9c 83       	std	Y+4, r25	; 0x04
    1434:	8b 83       	std	Y+3, r24	; 0x03
		q = q->pxNextFreeBlock;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	fc 01       	movw	r30, r24
    143c:	80 81       	ld	r24, Z
    143e:	91 81       	ldd	r25, Z+1	; 0x01
    1440:	9a 83       	std	Y+2, r25	; 0x02
    1442:	89 83       	std	Y+1, r24	; 0x01
	size = pxBlockToInsert->size;										
	/* Iterate through the list until a block is found that has a larger size */	
	/* than the block we are inserting. */		
	q = xStart.pxNextFreeBlock;
	p = &xStart;
	while(q && q->size < size) {
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	9a 81       	ldd	r25, Y+2	; 0x02
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	51 f0       	breq	.+20     	; 0x1460 <vInsert_Block_Into_Heap+0x6e>
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	fc 01       	movw	r30, r24
    1452:	22 81       	ldd	r18, Z+2	; 0x02
    1454:	33 81       	ldd	r19, Z+3	; 0x03
    1456:	8d 81       	ldd	r24, Y+5	; 0x05
    1458:	9e 81       	ldd	r25, Y+6	; 0x06
    145a:	28 17       	cp	r18, r24
    145c:	39 07       	cpc	r19, r25
    145e:	38 f3       	brcs	.-50     	; 0x142e <vInsert_Block_Into_Heap+0x3c>
		q = q->pxNextFreeBlock;
	}
																					
	/* Update the list to include the block being inserted in the correct */		
	/* position. */																	
	pxBlockToInsert->pxNextFreeBlock = q;					
    1460:	8f 81       	ldd	r24, Y+7	; 0x07
    1462:	98 85       	ldd	r25, Y+8	; 0x08
    1464:	29 81       	ldd	r18, Y+1	; 0x01
    1466:	3a 81       	ldd	r19, Y+2	; 0x02
    1468:	fc 01       	movw	r30, r24
    146a:	31 83       	std	Z+1, r19	; 0x01
    146c:	20 83       	st	Z, r18
	p->pxNextFreeBlock = pxBlockToInsert;									
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	2f 81       	ldd	r18, Y+7	; 0x07
    1474:	38 85       	ldd	r19, Y+8	; 0x08
    1476:	fc 01       	movw	r30, r24
    1478:	31 83       	std	Z+1, r19	; 0x01
    147a:	20 83       	st	Z, r18
}
    147c:	28 96       	adiw	r28, 0x08	; 8
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <vHeap_Init>:

static void vHeap_Init() {
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	1f 92       	push	r1
    1494:	1f 92       	push	r1
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
	xBlockLink_t *pxFirstFreeBlock;
	
	pxFirstFreeBlock 					= (xBlockLink_t *)ucHeap;
    149a:	83 ee       	ldi	r24, 0xE3	; 227
    149c:	94 e0       	ldi	r25, 0x04	; 4
    149e:	9a 83       	std	Y+2, r25	; 0x02
    14a0:	89 83       	std	Y+1, r24	; 0x01
	pxFirstFreeBlock->size 				= configTOTAL_HEAP_SIZE;
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	9a 81       	ldd	r25, Y+2	; 0x02
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e1       	ldi	r19, 0x10	; 16
    14aa:	fc 01       	movw	r30, r24
    14ac:	33 83       	std	Z+3, r19	; 0x03
    14ae:	22 83       	std	Z+2, r18	; 0x02
	pxFirstFreeBlock->pxNextFreeBlock 	= NULL;
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	9a 81       	ldd	r25, Y+2	; 0x02
    14b4:	fc 01       	movw	r30, r24
    14b6:	11 82       	std	Z+1, r1	; 0x01
    14b8:	10 82       	st	Z, r1
	xStart.pxNextFreeBlock 				= pxFirstFreeBlock;
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	90 93 e0 04 	sts	0x04E0, r25
    14c2:	80 93 df 04 	sts	0x04DF, r24
	xStart.size      					= 0;
    14c6:	10 92 e2 04 	sts	0x04E2, r1
    14ca:	10 92 e1 04 	sts	0x04E1, r1
//	initial mutex or a semaphore
}
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	08 95       	ret

000014d8 <pvMalloc>:

void *pvMalloc(Size_t xWantedSize) {
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	2c 97       	sbiw	r28, 0x0c	; 12
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	9c 87       	std	Y+12, r25	; 0x0c
    14ee:	8b 87       	std	Y+11, r24	; 0x0b
	static char xHeapHasBeenInitialised = FALSE;
	void *pvReturnBlock = NULL;	
    14f0:	1a 82       	std	Y+2, r1	; 0x02
    14f2:	19 82       	std	Y+1, r1	; 0x01
	xBlockLink_t *pxPrevBlock, *pxCurrentBlock;
	xBlockLink_t *pxNewBlock;

	//first call vMalloc
	if (!xHeapHasBeenInitialised) {
    14f4:	80 91 be 04 	lds	r24, 0x04BE
    14f8:	88 23       	and	r24, r24
    14fa:	21 f4       	brne	.+8      	; 0x1504 <pvMalloc+0x2c>
		vHeap_Init();
    14fc:	c8 df       	rcall	.-112    	; 0x148e <vHeap_Init>
		xHeapHasBeenInitialised = TRUE;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	80 93 be 04 	sts	0x04BE, r24
	}
	
	if (!xWantedSize) return pvReturnBlock; //wanted size 0 
    1504:	8b 85       	ldd	r24, Y+11	; 0x0b
    1506:	9c 85       	ldd	r25, Y+12	; 0x0c
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	19 f4       	brne	.+6      	; 0x1512 <pvMalloc+0x3a>
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	9a 81       	ldd	r25, Y+2	; 0x02
    1510:	73 c0       	rjmp	.+230    	; 0x15f8 <pvMalloc+0x120>
	
	Size_t size = xWantedSize + sizeof(xBlockLink_t);
    1512:	8b 85       	ldd	r24, Y+11	; 0x0b
    1514:	9c 85       	ldd	r25, Y+12	; 0x0c
    1516:	04 96       	adiw	r24, 0x04	; 4
    1518:	98 87       	std	Y+8, r25	; 0x08
    151a:	8f 83       	std	Y+7, r24	; 0x07

    // critical region
	// take a semaphore
	pxPrevBlock = &xStart;
    151c:	8f ed       	ldi	r24, 0xDF	; 223
    151e:	94 e0       	ldi	r25, 0x04	; 4
    1520:	9c 83       	std	Y+4, r25	; 0x04
    1522:	8b 83       	std	Y+3, r24	; 0x03
	pxCurrentBlock = xStart.pxNextFreeBlock;
    1524:	80 91 df 04 	lds	r24, 0x04DF
    1528:	90 91 e0 04 	lds	r25, 0x04E0
    152c:	9e 83       	std	Y+6, r25	; 0x06
    152e:	8d 83       	std	Y+5, r24	; 0x05
	while ((pxCurrentBlock) && (pxCurrentBlock->size < size)) {
    1530:	0b c0       	rjmp	.+22     	; 0x1548 <pvMalloc+0x70>
		pxPrevBlock = pxCurrentBlock;
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	9c 83       	std	Y+4, r25	; 0x04
    1538:	8b 83       	std	Y+3, r24	; 0x03
		pxCurrentBlock = pxCurrentBlock->pxNextFreeBlock;
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	9e 81       	ldd	r25, Y+6	; 0x06
    153e:	fc 01       	movw	r30, r24
    1540:	80 81       	ld	r24, Z
    1542:	91 81       	ldd	r25, Z+1	; 0x01
    1544:	9e 83       	std	Y+6, r25	; 0x06
    1546:	8d 83       	std	Y+5, r24	; 0x05

    // critical region
	// take a semaphore
	pxPrevBlock = &xStart;
	pxCurrentBlock = xStart.pxNextFreeBlock;
	while ((pxCurrentBlock) && (pxCurrentBlock->size < size)) {
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	9e 81       	ldd	r25, Y+6	; 0x06
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	51 f0       	breq	.+20     	; 0x1564 <pvMalloc+0x8c>
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	fc 01       	movw	r30, r24
    1556:	22 81       	ldd	r18, Z+2	; 0x02
    1558:	33 81       	ldd	r19, Z+3	; 0x03
    155a:	8f 81       	ldd	r24, Y+7	; 0x07
    155c:	98 85       	ldd	r25, Y+8	; 0x08
    155e:	28 17       	cp	r18, r24
    1560:	39 07       	cpc	r19, r25
    1562:	38 f3       	brcs	.-50     	; 0x1532 <pvMalloc+0x5a>
		pxPrevBlock = pxCurrentBlock;
		pxCurrentBlock = pxCurrentBlock->pxNextFreeBlock;
	}	
	
	if (pxCurrentBlock) {
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	09 f4       	brne	.+2      	; 0x156e <pvMalloc+0x96>
    156c:	43 c0       	rjmp	.+134    	; 0x15f4 <pvMalloc+0x11c>
		pvReturnBlock = (void *)((BYTE *)pxCurrentBlock + heapSTRUCT_SIZE);
    156e:	84 e0       	ldi	r24, 0x04	; 4
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	2d 81       	ldd	r18, Y+5	; 0x05
    1574:	3e 81       	ldd	r19, Y+6	; 0x06
    1576:	82 0f       	add	r24, r18
    1578:	93 1f       	adc	r25, r19
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	89 83       	std	Y+1, r24	; 0x01
		pxPrevBlock->pxNextFreeBlock = pxCurrentBlock->pxNextFreeBlock;
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	fc 01       	movw	r30, r24
    1584:	20 81       	ld	r18, Z
    1586:	31 81       	ldd	r19, Z+1	; 0x01
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	fc 01       	movw	r30, r24
    158e:	31 83       	std	Z+1, r19	; 0x01
    1590:	20 83       	st	Z, r18
		
		if (pxCurrentBlock->size > size+heapMINIMUM_BLOCK_SIZE) {
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	9e 81       	ldd	r25, Y+6	; 0x06
    1596:	fc 01       	movw	r30, r24
    1598:	22 81       	ldd	r18, Z+2	; 0x02
    159a:	33 81       	ldd	r19, Z+3	; 0x03
    159c:	84 e0       	ldi	r24, 0x04	; 4
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	ac 01       	movw	r20, r24
    15a2:	44 0f       	add	r20, r20
    15a4:	55 1f       	adc	r21, r21
    15a6:	8f 81       	ldd	r24, Y+7	; 0x07
    15a8:	98 85       	ldd	r25, Y+8	; 0x08
    15aa:	84 0f       	add	r24, r20
    15ac:	95 1f       	adc	r25, r21
    15ae:	82 17       	cp	r24, r18
    15b0:	93 07       	cpc	r25, r19
    15b2:	00 f5       	brcc	.+64     	; 0x15f4 <pvMalloc+0x11c>
			//split block into two blocks
			pxNewBlock = ( void * ) ( ( BYTE * ) pxCurrentBlock + size );
    15b4:	2d 81       	ldd	r18, Y+5	; 0x05
    15b6:	3e 81       	ldd	r19, Y+6	; 0x06
    15b8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ba:	98 85       	ldd	r25, Y+8	; 0x08
    15bc:	82 0f       	add	r24, r18
    15be:	93 1f       	adc	r25, r19
    15c0:	9a 87       	std	Y+10, r25	; 0x0a
    15c2:	89 87       	std	Y+9, r24	; 0x09

			/* Calculate the sizes of two blocks split from the single
			block. */
			pxNewBlock->size = pxCurrentBlock->size - size;
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	9e 81       	ldd	r25, Y+6	; 0x06
    15c8:	fc 01       	movw	r30, r24
    15ca:	22 81       	ldd	r18, Z+2	; 0x02
    15cc:	33 81       	ldd	r19, Z+3	; 0x03
    15ce:	8f 81       	ldd	r24, Y+7	; 0x07
    15d0:	98 85       	ldd	r25, Y+8	; 0x08
    15d2:	28 1b       	sub	r18, r24
    15d4:	39 0b       	sbc	r19, r25
    15d6:	89 85       	ldd	r24, Y+9	; 0x09
    15d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15da:	fc 01       	movw	r30, r24
    15dc:	33 83       	std	Z+3, r19	; 0x03
    15de:	22 83       	std	Z+2, r18	; 0x02
			pxCurrentBlock->size = size;
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	9e 81       	ldd	r25, Y+6	; 0x06
    15e4:	2f 81       	ldd	r18, Y+7	; 0x07
    15e6:	38 85       	ldd	r19, Y+8	; 0x08
    15e8:	fc 01       	movw	r30, r24
    15ea:	33 83       	std	Z+3, r19	; 0x03
    15ec:	22 83       	std	Z+2, r18	; 0x02

			/* Insert the new block into the list of free blocks. */
			vInsert_Block_Into_Heap(pxNewBlock);
    15ee:	89 85       	ldd	r24, Y+9	; 0x09
    15f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f2:	ff de       	rcall	.-514    	; 0x13f2 <vInsert_Block_Into_Heap>
		}
	}
	//critical region
	//release a semaphore
	return pvReturnBlock;
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    15f8:	2c 96       	adiw	r28, 0x0c	; 12
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	08 95       	ret

0000160a <vSystem_Queue_Initial>:
#include <system.h>

queue_t xAlarmClockQueue;

static void vSystem_Queue_Initial(void) {
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62

	vQueue_Init(&xAlarmClockQueue);
    1612:	83 ee       	ldi	r24, 0xE3	; 227
    1614:	94 e1       	ldi	r25, 0x14	; 20
    1616:	d7 d1       	rcall	.+942    	; 0x19c6 <vQueue_Init>
}
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	08 95       	ret

0000161e <vKernel_Initial>:

void vKernel_Initial(void) {
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
	vDisable_Interrupts();
    1626:	0d d1       	rcall	.+538    	; 0x1842 <vDisable_Interrupts>

	vSystem_Queue_Initial();
    1628:	f0 df       	rcall	.-32     	; 0x160a <vSystem_Queue_Initial>
	vOsTick_Init();
    162a:	f3 d0       	rcall	.+486    	; 0x1812 <vOsTick_Init>
	
}
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	08 95       	ret

00001632 <pxGet_Current_Tick>:
#include <system.h>

volatile osTick_t xCurrentTick; //tick is change in ISR

inline osTick_t * pxGet_Current_Tick(void) {
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    return (osTick_t*)&xCurrentTick;
    163a:	87 ee       	ldi	r24, 0xE7	; 231
    163c:	94 e1       	ldi	r25, 0x14	; 20
}
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <vTick_Inc>:

/*
pxDest = pxSource + amount
*/
inline void vTick_Inc(osTick_t *pxDest, osTick_t *pxSource, U32 amount) {
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	28 97       	sbiw	r28, 0x08	; 8
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	9a 83       	std	Y+2, r25	; 0x02
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	7c 83       	std	Y+4, r23	; 0x04
    165e:	6b 83       	std	Y+3, r22	; 0x03
    1660:	2d 83       	std	Y+5, r18	; 0x05
    1662:	3e 83       	std	Y+6, r19	; 0x06
    1664:	4f 83       	std	Y+7, r20	; 0x07
    1666:	58 87       	std	Y+8, r21	; 0x08
     
     pxDest->Low  =  pxSource->Low + amount;
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	fc 01       	movw	r30, r24
    166e:	24 81       	ldd	r18, Z+4	; 0x04
    1670:	35 81       	ldd	r19, Z+5	; 0x05
    1672:	46 81       	ldd	r20, Z+6	; 0x06
    1674:	57 81       	ldd	r21, Z+7	; 0x07
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	af 81       	ldd	r26, Y+7	; 0x07
    167c:	b8 85       	ldd	r27, Y+8	; 0x08
    167e:	82 0f       	add	r24, r18
    1680:	93 1f       	adc	r25, r19
    1682:	a4 1f       	adc	r26, r20
    1684:	b5 1f       	adc	r27, r21
    1686:	29 81       	ldd	r18, Y+1	; 0x01
    1688:	3a 81       	ldd	r19, Y+2	; 0x02
    168a:	f9 01       	movw	r30, r18
    168c:	84 83       	std	Z+4, r24	; 0x04
    168e:	95 83       	std	Z+5, r25	; 0x05
    1690:	a6 83       	std	Z+6, r26	; 0x06
    1692:	b7 83       	std	Z+7, r27	; 0x07
     pxDest->High =  pxSource->High; 
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	fc 01       	movw	r30, r24
    169a:	80 81       	ld	r24, Z
    169c:	91 81       	ldd	r25, Z+1	; 0x01
    169e:	a2 81       	ldd	r26, Z+2	; 0x02
    16a0:	b3 81       	ldd	r27, Z+3	; 0x03
    16a2:	29 81       	ldd	r18, Y+1	; 0x01
    16a4:	3a 81       	ldd	r19, Y+2	; 0x02
    16a6:	f9 01       	movw	r30, r18
    16a8:	80 83       	st	Z, r24
    16aa:	91 83       	std	Z+1, r25	; 0x01
    16ac:	a2 83       	std	Z+2, r26	; 0x02
    16ae:	b3 83       	std	Z+3, r27	; 0x03

     if (MAXLOWTICK - pxSource->Low < amount) 
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	fc 01       	movw	r30, r24
    16b6:	84 81       	ldd	r24, Z+4	; 0x04
    16b8:	95 81       	ldd	r25, Z+5	; 0x05
    16ba:	a6 81       	ldd	r26, Z+6	; 0x06
    16bc:	b7 81       	ldd	r27, Z+7	; 0x07
    16be:	9c 01       	movw	r18, r24
    16c0:	ad 01       	movw	r20, r26
    16c2:	20 95       	com	r18
    16c4:	30 95       	com	r19
    16c6:	40 95       	com	r20
    16c8:	50 95       	com	r21
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	9e 81       	ldd	r25, Y+6	; 0x06
    16ce:	af 81       	ldd	r26, Y+7	; 0x07
    16d0:	b8 85       	ldd	r27, Y+8	; 0x08
    16d2:	28 17       	cp	r18, r24
    16d4:	39 07       	cpc	r19, r25
    16d6:	4a 07       	cpc	r20, r26
    16d8:	5b 07       	cpc	r21, r27
    16da:	88 f4       	brcc	.+34     	; 0x16fe <vTick_Inc+0xba>
     pxDest->High++;
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	9a 81       	ldd	r25, Y+2	; 0x02
    16e0:	fc 01       	movw	r30, r24
    16e2:	80 81       	ld	r24, Z
    16e4:	91 81       	ldd	r25, Z+1	; 0x01
    16e6:	a2 81       	ldd	r26, Z+2	; 0x02
    16e8:	b3 81       	ldd	r27, Z+3	; 0x03
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	a1 1d       	adc	r26, r1
    16ee:	b1 1d       	adc	r27, r1
    16f0:	29 81       	ldd	r18, Y+1	; 0x01
    16f2:	3a 81       	ldd	r19, Y+2	; 0x02
    16f4:	f9 01       	movw	r30, r18
    16f6:	80 83       	st	Z, r24
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	a2 83       	std	Z+2, r26	; 0x02
    16fc:	b3 83       	std	Z+3, r27	; 0x03
}
    16fe:	28 96       	adiw	r28, 0x08	; 8
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	08 95       	ret

00001710 <scCompare_Tick>:

/* return 1: t1>t2, -1:t1<t2, 0:t1=t2 */ 
S8 scCompare_Tick(osTick_t *pxTimer1, osTick_t *pxTimer2) {
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	65 97       	sbiw	r28, 0x15	; 21
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	9b 8b       	std	Y+19, r25	; 0x13
    1726:	8a 8b       	std	Y+18, r24	; 0x12
    1728:	7d 8b       	std	Y+21, r23	; 0x15
    172a:	6c 8b       	std	Y+20, r22	; 0x14
	S8 scReturnValue=0;
    172c:	19 82       	std	Y+1, r1	; 0x01
	U32 High1 = pxTimer1->High;
    172e:	8a 89       	ldd	r24, Y+18	; 0x12
    1730:	9b 89       	ldd	r25, Y+19	; 0x13
    1732:	fc 01       	movw	r30, r24
    1734:	80 81       	ld	r24, Z
    1736:	91 81       	ldd	r25, Z+1	; 0x01
    1738:	a2 81       	ldd	r26, Z+2	; 0x02
    173a:	b3 81       	ldd	r27, Z+3	; 0x03
    173c:	8a 83       	std	Y+2, r24	; 0x02
    173e:	9b 83       	std	Y+3, r25	; 0x03
    1740:	ac 83       	std	Y+4, r26	; 0x04
    1742:	bd 83       	std	Y+5, r27	; 0x05
	U32 High2 = pxTimer2->High;
    1744:	8c 89       	ldd	r24, Y+20	; 0x14
    1746:	9d 89       	ldd	r25, Y+21	; 0x15
    1748:	fc 01       	movw	r30, r24
    174a:	80 81       	ld	r24, Z
    174c:	91 81       	ldd	r25, Z+1	; 0x01
    174e:	a2 81       	ldd	r26, Z+2	; 0x02
    1750:	b3 81       	ldd	r27, Z+3	; 0x03
    1752:	8e 83       	std	Y+6, r24	; 0x06
    1754:	9f 83       	std	Y+7, r25	; 0x07
    1756:	a8 87       	std	Y+8, r26	; 0x08
    1758:	b9 87       	std	Y+9, r27	; 0x09
	U32 Low1 = pxTimer1->Low;
    175a:	8a 89       	ldd	r24, Y+18	; 0x12
    175c:	9b 89       	ldd	r25, Y+19	; 0x13
    175e:	fc 01       	movw	r30, r24
    1760:	84 81       	ldd	r24, Z+4	; 0x04
    1762:	95 81       	ldd	r25, Z+5	; 0x05
    1764:	a6 81       	ldd	r26, Z+6	; 0x06
    1766:	b7 81       	ldd	r27, Z+7	; 0x07
    1768:	8a 87       	std	Y+10, r24	; 0x0a
    176a:	9b 87       	std	Y+11, r25	; 0x0b
    176c:	ac 87       	std	Y+12, r26	; 0x0c
    176e:	bd 87       	std	Y+13, r27	; 0x0d
	U32 Low2 = pxTimer2->Low;
    1770:	8c 89       	ldd	r24, Y+20	; 0x14
    1772:	9d 89       	ldd	r25, Y+21	; 0x15
    1774:	fc 01       	movw	r30, r24
    1776:	84 81       	ldd	r24, Z+4	; 0x04
    1778:	95 81       	ldd	r25, Z+5	; 0x05
    177a:	a6 81       	ldd	r26, Z+6	; 0x06
    177c:	b7 81       	ldd	r27, Z+7	; 0x07
    177e:	8e 87       	std	Y+14, r24	; 0x0e
    1780:	9f 87       	std	Y+15, r25	; 0x0f
    1782:	a8 8b       	std	Y+16, r26	; 0x10
    1784:	b9 8b       	std	Y+17, r27	; 0x11

    if (High1 > High2) scReturnValue = 1;     
    1786:	2a 81       	ldd	r18, Y+2	; 0x02
    1788:	3b 81       	ldd	r19, Y+3	; 0x03
    178a:	4c 81       	ldd	r20, Y+4	; 0x04
    178c:	5d 81       	ldd	r21, Y+5	; 0x05
    178e:	8e 81       	ldd	r24, Y+6	; 0x06
    1790:	9f 81       	ldd	r25, Y+7	; 0x07
    1792:	a8 85       	ldd	r26, Y+8	; 0x08
    1794:	b9 85       	ldd	r27, Y+9	; 0x09
    1796:	82 17       	cp	r24, r18
    1798:	93 07       	cpc	r25, r19
    179a:	a4 07       	cpc	r26, r20
    179c:	b5 07       	cpc	r27, r21
    179e:	10 f4       	brcc	.+4      	; 0x17a4 <scCompare_Tick+0x94>
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	89 83       	std	Y+1, r24	; 0x01
	if (High1 < High2) scReturnValue = -1;     
    17a4:	2a 81       	ldd	r18, Y+2	; 0x02
    17a6:	3b 81       	ldd	r19, Y+3	; 0x03
    17a8:	4c 81       	ldd	r20, Y+4	; 0x04
    17aa:	5d 81       	ldd	r21, Y+5	; 0x05
    17ac:	8e 81       	ldd	r24, Y+6	; 0x06
    17ae:	9f 81       	ldd	r25, Y+7	; 0x07
    17b0:	a8 85       	ldd	r26, Y+8	; 0x08
    17b2:	b9 85       	ldd	r27, Y+9	; 0x09
    17b4:	28 17       	cp	r18, r24
    17b6:	39 07       	cpc	r19, r25
    17b8:	4a 07       	cpc	r20, r26
    17ba:	5b 07       	cpc	r21, r27
    17bc:	10 f4       	brcc	.+4      	; 0x17c2 <scCompare_Tick+0xb2>
    17be:	8f ef       	ldi	r24, 0xFF	; 255
    17c0:	89 83       	std	Y+1, r24	; 0x01
    if (Low1 > Low2)   scReturnValue = 1;     
    17c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    17c4:	3b 85       	ldd	r19, Y+11	; 0x0b
    17c6:	4c 85       	ldd	r20, Y+12	; 0x0c
    17c8:	5d 85       	ldd	r21, Y+13	; 0x0d
    17ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    17cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    17ce:	a8 89       	ldd	r26, Y+16	; 0x10
    17d0:	b9 89       	ldd	r27, Y+17	; 0x11
    17d2:	82 17       	cp	r24, r18
    17d4:	93 07       	cpc	r25, r19
    17d6:	a4 07       	cpc	r26, r20
    17d8:	b5 07       	cpc	r27, r21
    17da:	10 f4       	brcc	.+4      	; 0x17e0 <scCompare_Tick+0xd0>
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	89 83       	std	Y+1, r24	; 0x01
    if (Low1 < Low2)   scReturnValue = -1;     
    17e0:	2a 85       	ldd	r18, Y+10	; 0x0a
    17e2:	3b 85       	ldd	r19, Y+11	; 0x0b
    17e4:	4c 85       	ldd	r20, Y+12	; 0x0c
    17e6:	5d 85       	ldd	r21, Y+13	; 0x0d
    17e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    17ec:	a8 89       	ldd	r26, Y+16	; 0x10
    17ee:	b9 89       	ldd	r27, Y+17	; 0x11
    17f0:	28 17       	cp	r18, r24
    17f2:	39 07       	cpc	r19, r25
    17f4:	4a 07       	cpc	r20, r26
    17f6:	5b 07       	cpc	r21, r27
    17f8:	10 f4       	brcc	.+4      	; 0x17fe <scCompare_Tick+0xee>
    17fa:	8f ef       	ldi	r24, 0xFF	; 255
    17fc:	89 83       	std	Y+1, r24	; 0x01
    return scReturnValue;
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
	if (pxTimer1->High < pxTimer2->High) scReturnValue = -1;     
    if (pxTimer1->Low > pxTimer2->Low)   scReturnValue = 1;     
    if (pxTimer1->Low < pxTimer2->Low)   scReturnValue = -1;     
    return scReturnValue;
*/	
}
    1800:	65 96       	adiw	r28, 0x15	; 21
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	08 95       	ret

00001812 <vOsTick_Init>:


inline void vOsTick_Init(void)
{
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
     
      xCurrentTick.Low = 0;
    181a:	10 92 eb 14 	sts	0x14EB, r1
    181e:	10 92 ec 14 	sts	0x14EC, r1
    1822:	10 92 ed 14 	sts	0x14ED, r1
    1826:	10 92 ee 14 	sts	0x14EE, r1
      xCurrentTick.High = 0;
    182a:	10 92 e7 14 	sts	0x14E7, r1
    182e:	10 92 e8 14 	sts	0x14E8, r1
    1832:	10 92 e9 14 	sts	0x14E9, r1
    1836:	10 92 ea 14 	sts	0x14EA, r1
	  vOsTimer_Hardware_Setup();
    183a:	6c d0       	rcall	.+216    	; 0x1914 <vOsTimer_Hardware_Setup>
}
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	08 95       	ret

00001842 <vDisable_Interrupts>:
#include <system.h>

/* enable and disable all interrupts */
inline void vDisable_Interrupts(void) {
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
	asm volatile ( "cli" :: );
    184a:	f8 94       	cli
}
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	08 95       	ret

00001852 <vEnable_Interrupts>:

inline void vEnable_Interrupts(void) {
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
	asm volatile ( "sei" :: );
    185a:	78 94       	sei
}
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <ucEnter_Critical>:
	asm volatile ( "pop		__tmp_reg__" :: );		
	asm volatile ( "out		__SREG__, __tmp_reg__" :: );	
}
*/

inline U8 ucEnter_Critical(void) {
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	1f 92       	push	r1
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
	U8 sreg;
	sreg = SREG;
    186c:	8f e5       	ldi	r24, 0x5F	; 95
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	fc 01       	movw	r30, r24
    1872:	80 81       	ld	r24, Z
    1874:	89 83       	std	Y+1, r24	; 0x01
	vDisable_Interrupts();
    1876:	e5 df       	rcall	.-54     	; 0x1842 <vDisable_Interrupts>
	return sreg;
    1878:	89 81       	ldd	r24, Y+1	; 0x01
}
    187a:	0f 90       	pop	r0
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <vExit_Critical>:

inline void vExit_Critical(U8 sreg) {
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	1f 92       	push	r1
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	89 83       	std	Y+1, r24	; 0x01
	SREG = sreg;
    188e:	8f e5       	ldi	r24, 0x5F	; 95
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	29 81       	ldd	r18, Y+1	; 0x01
    1894:	fc 01       	movw	r30, r24
    1896:	20 83       	st	Z, r18
}
    1898:	0f 90       	pop	r0
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

000018a0 <__vector_47>:
#include <projdefs.h>

extern volatile osTick_t xCurrentTick;

ISR(TIMER5_COMPA_vect)
{
    18a0:	1f 92       	push	r1
    18a2:	0f 92       	push	r0
    18a4:	00 90 5f 00 	lds	r0, 0x005F
    18a8:	0f 92       	push	r0
    18aa:	11 24       	eor	r1, r1
    18ac:	00 90 5b 00 	lds	r0, 0x005B
    18b0:	0f 92       	push	r0
    18b2:	2f 93       	push	r18
    18b4:	3f 93       	push	r19
    18b6:	4f 93       	push	r20
    18b8:	5f 93       	push	r21
    18ba:	6f 93       	push	r22
    18bc:	7f 93       	push	r23
    18be:	8f 93       	push	r24
    18c0:	9f 93       	push	r25
    18c2:	af 93       	push	r26
    18c4:	bf 93       	push	r27
    18c6:	ef 93       	push	r30
    18c8:	ff 93       	push	r31
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
	vTick_Inc((osTick_t*)&xCurrentTick, (osTick_t*)&xCurrentTick, 0x1);
    18d2:	21 e0       	ldi	r18, 0x01	; 1
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	67 ee       	ldi	r22, 0xE7	; 231
    18dc:	74 e1       	ldi	r23, 0x14	; 20
    18de:	87 ee       	ldi	r24, 0xE7	; 231
    18e0:	94 e1       	ldi	r25, 0x14	; 20
    18e2:	b0 de       	rcall	.-672    	; 0x1644 <vTick_Inc>
	vAlarmClock_Check();
    18e4:	07 dd       	rcall	.-1522   	; 0x12f4 <vAlarmClock_Check>
	/* TODO (#1#): 
			   1. check schedule
	*/                                
}
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	ff 91       	pop	r31
    18ec:	ef 91       	pop	r30
    18ee:	bf 91       	pop	r27
    18f0:	af 91       	pop	r26
    18f2:	9f 91       	pop	r25
    18f4:	8f 91       	pop	r24
    18f6:	7f 91       	pop	r23
    18f8:	6f 91       	pop	r22
    18fa:	5f 91       	pop	r21
    18fc:	4f 91       	pop	r20
    18fe:	3f 91       	pop	r19
    1900:	2f 91       	pop	r18
    1902:	0f 90       	pop	r0
    1904:	00 92 5b 00 	sts	0x005B, r0
    1908:	0f 90       	pop	r0
    190a:	00 92 5f 00 	sts	0x005F, r0
    190e:	0f 90       	pop	r0
    1910:	1f 90       	pop	r1
    1912:	18 95       	reti

00001914 <vOsTimer_Hardware_Setup>:

/*
 * Setup timer 5 compare match A to generate a tick interrupt.
 */
void vOsTimer_Hardware_Setup(void) {
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	00 d0       	rcall	.+0      	; 0x191a <vOsTimer_Hardware_Setup+0x6>
    191a:	1f 92       	push	r1
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
U32 ulCompareMatch;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1920:	88 ee       	ldi	r24, 0xE8	; 232
    1922:	93 e0       	ldi	r25, 0x03	; 3
    1924:	a0 e0       	ldi	r26, 0x00	; 0
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	9a 83       	std	Y+2, r25	; 0x02
    192c:	ab 83       	std	Y+3, r26	; 0x03
    192e:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= configCLOCK_PRESCALER;
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	ab 81       	ldd	r26, Y+3	; 0x03
    1936:	bc 81       	ldd	r27, Y+4	; 0x04
    1938:	89 2f       	mov	r24, r25
    193a:	9a 2f       	mov	r25, r26
    193c:	ab 2f       	mov	r26, r27
    193e:	bb 27       	eor	r27, r27
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	9a 83       	std	Y+2, r25	; 0x02
    1944:	ab 83       	std	Y+3, r26	; 0x03
    1946:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. because count from 0*/
	ulCompareMatch -= ( U32 ) 1;
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	ab 81       	ldd	r26, Y+3	; 0x03
    194e:	bc 81       	ldd	r27, Y+4	; 0x04
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	a1 09       	sbc	r26, r1
    1954:	b1 09       	sbc	r27, r1
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	9a 83       	std	Y+2, r25	; 0x02
    195a:	ab 83       	std	Y+3, r26	; 0x03
    195c:	bc 83       	std	Y+4, r27	; 0x04

	//clear relative register
	vDisable_Interrupts();
    195e:	71 df       	rcall	.-286    	; 0x1842 <vDisable_Interrupts>
	TCCR5A 	= 0;
    1960:	80 e2       	ldi	r24, 0x20	; 32
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	fc 01       	movw	r30, r24
    1966:	10 82       	st	Z, r1
	TCCR5B 	= 0;
    1968:	81 e2       	ldi	r24, 0x21	; 33
    196a:	91 e0       	ldi	r25, 0x01	; 1
    196c:	fc 01       	movw	r30, r24
    196e:	10 82       	st	Z, r1
	TCNT5	= 0;
    1970:	84 e2       	ldi	r24, 0x24	; 36
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	fc 01       	movw	r30, r24
    1976:	11 82       	std	Z+1, r1	; 0x01
    1978:	10 82       	st	Z, r1
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */

	OCR5A = ulCompareMatch; 	// compare match register
    197a:	88 e2       	ldi	r24, 0x28	; 40
    197c:	91 e0       	ldi	r25, 0x01	; 1
    197e:	29 81       	ldd	r18, Y+1	; 0x01
    1980:	3a 81       	ldd	r19, Y+2	; 0x02
    1982:	fc 01       	movw	r30, r24
    1984:	31 83       	std	Z+1, r19	; 0x01
    1986:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	TCCR5B |= (1 << WGM52);		// CTC mode
    1988:	81 e2       	ldi	r24, 0x21	; 33
    198a:	91 e0       	ldi	r25, 0x01	; 1
    198c:	21 e2       	ldi	r18, 0x21	; 33
    198e:	31 e0       	ldi	r19, 0x01	; 1
    1990:	f9 01       	movw	r30, r18
    1992:	20 81       	ld	r18, Z
    1994:	28 60       	ori	r18, 0x08	; 8
    1996:	fc 01       	movw	r30, r24
    1998:	20 83       	st	Z, r18
	TCCR5B |= (1 << CS52);		// 256 prescaler
    199a:	81 e2       	ldi	r24, 0x21	; 33
    199c:	91 e0       	ldi	r25, 0x01	; 1
    199e:	21 e2       	ldi	r18, 0x21	; 33
    19a0:	31 e0       	ldi	r19, 0x01	; 1
    19a2:	f9 01       	movw	r30, r18
    19a4:	20 81       	ld	r18, Z
    19a6:	24 60       	ori	r18, 0x04	; 4
    19a8:	fc 01       	movw	r30, r24
    19aa:	20 83       	st	Z, r18

	TIMSK5 = (1 << OCIE5A);		// enable timer compare interrupt
    19ac:	83 e7       	ldi	r24, 0x73	; 115
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	22 e0       	ldi	r18, 0x02	; 2
    19b2:	fc 01       	movw	r30, r24
    19b4:	20 83       	st	Z, r18
	vEnable_Interrupts();		// enable all interrupts
    19b6:	4d df       	rcall	.-358    	; 0x1852 <vEnable_Interrupts>
}
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	08 95       	ret

000019c6 <vQueue_Init>:
   q = pxQueue_Last_Node(pxQueue);                  
   if (q != &(pxQueue->headNode)) {
       vNode_Remove(q);
   }    
   return q;
}
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	1f 92       	push	r1
    19cc:	1f 92       	push	r1
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	29 81       	ldd	r18, Y+1	; 0x01
    19d8:	3a 81       	ldd	r19, Y+2	; 0x02
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	9a 81       	ldd	r25, Y+2	; 0x02
    19de:	fc 01       	movw	r30, r24
    19e0:	33 83       	std	Z+3, r19	; 0x03
    19e2:	22 83       	std	Z+2, r18	; 0x02
    19e4:	29 81       	ldd	r18, Y+1	; 0x01
    19e6:	3a 81       	ldd	r19, Y+2	; 0x02
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	9a 81       	ldd	r25, Y+2	; 0x02
    19ec:	fc 01       	movw	r30, r24
    19ee:	31 83       	std	Z+1, r19	; 0x01
    19f0:	20 83       	st	Z, r18
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	08 95       	ret

000019fc <pxQueue_Head_Node>:
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	1f 92       	push	r1
    1a02:	1f 92       	push	r1
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	9a 83       	std	Y+2, r25	; 0x02
    1a0a:	89 83       	std	Y+1, r24	; 0x01
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	08 95       	ret

00001a1a <pxQueue_First_Node>:
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	1f 92       	push	r1
    1a20:	1f 92       	push	r1
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	9a 83       	std	Y+2, r25	; 0x02
    1a28:	89 83       	std	Y+1, r24	; 0x01
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2e:	fc 01       	movw	r30, r24
    1a30:	82 81       	ldd	r24, Z+2	; 0x02
    1a32:	93 81       	ldd	r25, Z+3	; 0x03
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	08 95       	ret

00001a3e <pxQueue_Last_Node>:
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	1f 92       	push	r1
    1a44:	1f 92       	push	r1
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	9a 83       	std	Y+2, r25	; 0x02
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	fc 01       	movw	r30, r24
    1a54:	80 81       	ld	r24, Z
    1a56:	91 81       	ldd	r25, Z+1	; 0x01
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	08 95       	ret

00001a62 <vQueue_Append_Node>:
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <vQueue_Append_Node+0x6>
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <vQueue_Append_Node+0x8>
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	9c 83       	std	Y+4, r25	; 0x04
    1a70:	8b 83       	std	Y+3, r24	; 0x03
    1a72:	7e 83       	std	Y+6, r23	; 0x06
    1a74:	6d 83       	std	Y+5, r22	; 0x05
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	e1 df       	rcall	.-62     	; 0x1a3e <pxQueue_Last_Node>
    1a7c:	9a 83       	std	Y+2, r25	; 0x02
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	2d 81       	ldd	r18, Y+5	; 0x05
    1a86:	3e 81       	ldd	r19, Y+6	; 0x06
    1a88:	fc 01       	movw	r30, r24
    1a8a:	33 83       	std	Z+3, r19	; 0x03
    1a8c:	22 83       	std	Z+2, r18	; 0x02
    1a8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a90:	3c 81       	ldd	r19, Y+4	; 0x04
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	9e 81       	ldd	r25, Y+6	; 0x06
    1a96:	fc 01       	movw	r30, r24
    1a98:	33 83       	std	Z+3, r19	; 0x03
    1a9a:	22 83       	std	Z+2, r18	; 0x02
    1a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa0:	29 81       	ldd	r18, Y+1	; 0x01
    1aa2:	3a 81       	ldd	r19, Y+2	; 0x02
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	31 83       	std	Z+1, r19	; 0x01
    1aa8:	20 83       	st	Z, r18
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	9c 81       	ldd	r25, Y+4	; 0x04
    1aae:	2d 81       	ldd	r18, Y+5	; 0x05
    1ab0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	31 83       	std	Z+1, r19	; 0x01
    1ab6:	20 83       	st	Z, r18
    1ab8:	26 96       	adiw	r28, 0x06	; 6
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	08 95       	ret

00001aca <vNode_Remove>:
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <vNode_Remove+0x6>
    1ad0:	1f 92       	push	r1
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	9c 83       	std	Y+4, r25	; 0x04
    1ad8:	8b 83       	std	Y+3, r24	; 0x03
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ade:	fc 01       	movw	r30, r24
    1ae0:	80 81       	ld	r24, Z
    1ae2:	91 81       	ldd	r25, Z+1	; 0x01
    1ae4:	9a 83       	std	Y+2, r25	; 0x02
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	9a 81       	ldd	r25, Y+2	; 0x02
    1aec:	fc 01       	movw	r30, r24
    1aee:	20 81       	ld	r18, Z
    1af0:	31 81       	ldd	r19, Z+1	; 0x01
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	9c 81       	ldd	r25, Y+4	; 0x04
    1af6:	28 17       	cp	r18, r24
    1af8:	39 07       	cpc	r19, r25
    1afa:	f1 f0       	breq	.+60     	; 0x1b38 <vNode_Remove+0x6e>
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	fc 01       	movw	r30, r24
    1b02:	22 81       	ldd	r18, Z+2	; 0x02
    1b04:	33 81       	ldd	r19, Z+3	; 0x03
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	33 83       	std	Z+3, r19	; 0x03
    1b0e:	22 83       	std	Z+2, r18	; 0x02
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	fc 01       	movw	r30, r24
    1b16:	82 81       	ldd	r24, Z+2	; 0x02
    1b18:	93 81       	ldd	r25, Z+3	; 0x03
    1b1a:	29 81       	ldd	r18, Y+1	; 0x01
    1b1c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b1e:	fc 01       	movw	r30, r24
    1b20:	31 83       	std	Z+1, r19	; 0x01
    1b22:	20 83       	st	Z, r18
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	fc 01       	movw	r30, r24
    1b2a:	13 82       	std	Z+3, r1	; 0x03
    1b2c:	12 82       	std	Z+2, r1	; 0x02
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	fc 01       	movw	r30, r24
    1b34:	11 82       	std	Z+1, r1	; 0x01
    1b36:	10 82       	st	Z, r1
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	08 95       	ret

00001b46 <vNode_Insert>:

/*
*  append pxNewNode to next of pxPrevNode
*/
inline void vNode_Insert(node_t *pxPrevNode, node_t *pxNewNode) {
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <vNode_Insert+0x6>
    1b4c:	1f 92       	push	r1
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	7c 83       	std	Y+4, r23	; 0x04
    1b58:	6b 83       	std	Y+3, r22	; 0x03
   pxNewNode->next 			= pxPrevNode->next;
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	fc 01       	movw	r30, r24
    1b60:	22 81       	ldd	r18, Z+2	; 0x02
    1b62:	33 81       	ldd	r19, Z+3	; 0x03
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	9c 81       	ldd	r25, Y+4	; 0x04
    1b68:	fc 01       	movw	r30, r24
    1b6a:	33 83       	std	Z+3, r19	; 0x03
    1b6c:	22 83       	std	Z+2, r18	; 0x02
   pxPrevNode->next 		= pxNewNode;
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	2b 81       	ldd	r18, Y+3	; 0x03
    1b74:	3c 81       	ldd	r19, Y+4	; 0x04
    1b76:	fc 01       	movw	r30, r24
    1b78:	33 83       	std	Z+3, r19	; 0x03
    1b7a:	22 83       	std	Z+2, r18	; 0x02
   pxNewNode->next->prev 	= pxNewNode;
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	fc 01       	movw	r30, r24
    1b82:	82 81       	ldd	r24, Z+2	; 0x02
    1b84:	93 81       	ldd	r25, Z+3	; 0x03
    1b86:	2b 81       	ldd	r18, Y+3	; 0x03
    1b88:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	31 83       	std	Z+1, r19	; 0x01
    1b8e:	20 83       	st	Z, r18
   pxNewNode->prev 			= pxPrevNode;
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	29 81       	ldd	r18, Y+1	; 0x01
    1b96:	3a 81       	ldd	r19, Y+2	; 0x02
    1b98:	fc 01       	movw	r30, r24
    1b9a:	31 83       	std	Z+1, r19	; 0x01
    1b9c:	20 83       	st	Z, r18
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	08 95       	ret

00001bac <_ZN5Print5writeEPKc>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    1bac:	0f 93       	push	r16
    1bae:	1f 93       	push	r17
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <_ZN5Print5writeEPKc+0xa>
    1bb6:	1f 92       	push	r1
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	7c 83       	std	Y+4, r23	; 0x04
    1bc2:	6b 83       	std	Y+3, r22	; 0x03
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	19 f4       	brne	.+6      	; 0x1bd2 <_ZN5Print5writeEPKc+0x26>
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	14 c0       	rjmp	.+40     	; 0x1bfa <_ZN5Print5writeEPKc+0x4e>
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	80 81       	ld	r24, Z
    1bda:	91 81       	ldd	r25, Z+1	; 0x01
    1bdc:	02 96       	adiw	r24, 0x02	; 2
    1bde:	fc 01       	movw	r30, r24
    1be0:	00 81       	ld	r16, Z
    1be2:	11 81       	ldd	r17, Z+1	; 0x01
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	72 d7       	rcall	.+3812   	; 0x2ace <strlen>
    1bea:	ac 01       	movw	r20, r24
    1bec:	2b 81       	ldd	r18, Y+3	; 0x03
    1bee:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf4:	b9 01       	movw	r22, r18
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	19 95       	eicall
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	08 95       	ret

00001c0c <_ZN5Print5writeEPKhj>:
    1c0c:	cf 93       	push	r28
    1c0e:	df 93       	push	r29
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	28 97       	sbiw	r28, 0x08	; 8
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	9c 83       	std	Y+4, r25	; 0x04
    1c22:	8b 83       	std	Y+3, r24	; 0x03
    1c24:	7e 83       	std	Y+6, r23	; 0x06
    1c26:	6d 83       	std	Y+5, r22	; 0x05
    1c28:	58 87       	std	Y+8, r21	; 0x08
    1c2a:	4f 83       	std	Y+7, r20	; 0x07
    1c2c:	1a 82       	std	Y+2, r1	; 0x02
    1c2e:	19 82       	std	Y+1, r1	; 0x01
    1c30:	1c c0       	rjmp	.+56     	; 0x1c6a <_ZN5Print5writeEPKhj+0x5e>
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	fc 01       	movw	r30, r24
    1c38:	80 81       	ld	r24, Z
    1c3a:	91 81       	ldd	r25, Z+1	; 0x01
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	20 81       	ld	r18, Z
    1c40:	31 81       	ldd	r19, Z+1	; 0x01
    1c42:	8d 81       	ldd	r24, Y+5	; 0x05
    1c44:	9e 81       	ldd	r25, Y+6	; 0x06
    1c46:	ac 01       	movw	r20, r24
    1c48:	4f 5f       	subi	r20, 0xFF	; 255
    1c4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c4c:	5e 83       	std	Y+6, r21	; 0x06
    1c4e:	4d 83       	std	Y+5, r20	; 0x05
    1c50:	fc 01       	movw	r30, r24
    1c52:	40 81       	ld	r20, Z
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	64 2f       	mov	r22, r20
    1c5a:	f9 01       	movw	r30, r18
    1c5c:	19 95       	eicall
    1c5e:	29 81       	ldd	r18, Y+1	; 0x01
    1c60:	3a 81       	ldd	r19, Y+2	; 0x02
    1c62:	82 0f       	add	r24, r18
    1c64:	93 1f       	adc	r25, r19
    1c66:	9a 83       	std	Y+2, r25	; 0x02
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c6c:	98 85       	ldd	r25, Y+8	; 0x08
    1c6e:	9c 01       	movw	r18, r24
    1c70:	21 50       	subi	r18, 0x01	; 1
    1c72:	31 09       	sbc	r19, r1
    1c74:	38 87       	std	Y+8, r19	; 0x08
    1c76:	2f 83       	std	Y+7, r18	; 0x07
    1c78:	21 e0       	ldi	r18, 0x01	; 1
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <_ZN5Print5writeEPKhj+0x74>
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	22 23       	and	r18, r18
    1c82:	b9 f6       	brne	.-82     	; 0x1c32 <_ZN5Print5writeEPKhj+0x26>
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	9a 81       	ldd	r25, Y+2	; 0x02
    1c88:	28 96       	adiw	r28, 0x08	; 8
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	08 95       	ret

00001c9a <_ZN5Print5printEc>:
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <_ZN5Print5printEc+0x6>
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	9a 83       	std	Y+2, r25	; 0x02
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	6b 83       	std	Y+3, r22	; 0x03
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	fc 01       	movw	r30, r24
    1cb0:	80 81       	ld	r24, Z
    1cb2:	91 81       	ldd	r25, Z+1	; 0x01
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	20 81       	ld	r18, Z
    1cb8:	31 81       	ldd	r19, Z+1	; 0x01
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	6b 81       	ldd	r22, Y+3	; 0x03
    1cc0:	f9 01       	movw	r30, r18
    1cc2:	19 95       	eicall
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	08 95       	ret

00001cd0 <_ZN5Print5printEhi>:
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <_ZN5Print5printEhi+0x6>
    1cd6:	1f 92       	push	r1
    1cd8:	1f 92       	push	r1
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	9a 83       	std	Y+2, r25	; 0x02
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	6b 83       	std	Y+3, r22	; 0x03
    1ce4:	5d 83       	std	Y+5, r21	; 0x05
    1ce6:	4c 83       	std	Y+4, r20	; 0x04
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	88 2f       	mov	r24, r24
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	a0 e0       	ldi	r26, 0x00	; 0
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfa:	ac 01       	movw	r20, r24
    1cfc:	bd 01       	movw	r22, r26
    1cfe:	cf 01       	movw	r24, r30
    1d00:	08 d0       	rcall	.+16     	; 0x1d12 <_ZN5Print5printEmi>
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	08 95       	ret

00001d12 <_ZN5Print5printEmi>:
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	28 97       	sbiw	r28, 0x08	; 8
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	4b 83       	std	Y+3, r20	; 0x03
    1d2c:	5c 83       	std	Y+4, r21	; 0x04
    1d2e:	6d 83       	std	Y+5, r22	; 0x05
    1d30:	7e 83       	std	Y+6, r23	; 0x06
    1d32:	38 87       	std	Y+8, r19	; 0x08
    1d34:	2f 83       	std	Y+7, r18	; 0x07
    1d36:	8f 81       	ldd	r24, Y+7	; 0x07
    1d38:	98 85       	ldd	r25, Y+8	; 0x08
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	79 f4       	brne	.+30     	; 0x1d5c <_ZN5Print5printEmi+0x4a>
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	fc 01       	movw	r30, r24
    1d44:	80 81       	ld	r24, Z
    1d46:	91 81       	ldd	r25, Z+1	; 0x01
    1d48:	fc 01       	movw	r30, r24
    1d4a:	20 81       	ld	r18, Z
    1d4c:	31 81       	ldd	r19, Z+1	; 0x01
    1d4e:	4b 81       	ldd	r20, Y+3	; 0x03
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	64 2f       	mov	r22, r20
    1d56:	f9 01       	movw	r30, r18
    1d58:	19 95       	eicall
    1d5a:	0b c0       	rjmp	.+22     	; 0x1d72 <_ZN5Print5printEmi+0x60>
    1d5c:	2f 81       	ldd	r18, Y+7	; 0x07
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	ad 81       	ldd	r26, Y+5	; 0x05
    1d64:	be 81       	ldd	r27, Y+6	; 0x06
    1d66:	e9 81       	ldd	r30, Y+1	; 0x01
    1d68:	fa 81       	ldd	r31, Y+2	; 0x02
    1d6a:	ac 01       	movw	r20, r24
    1d6c:	bd 01       	movw	r22, r26
    1d6e:	cf 01       	movw	r24, r30
    1d70:	09 d0       	rcall	.+18     	; 0x1d84 <_ZN5Print11printNumberEmh>
    1d72:	28 96       	adiw	r28, 0x08	; 8
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	df 91       	pop	r29
    1d80:	cf 91       	pop	r28
    1d82:	08 95       	ret

00001d84 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	e3 97       	sbiw	r28, 0x33	; 51
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	9a a7       	std	Y+42, r25	; 0x2a
    1d9a:	89 a7       	std	Y+41, r24	; 0x29
    1d9c:	4b a7       	std	Y+43, r20	; 0x2b
    1d9e:	5c a7       	std	Y+44, r21	; 0x2c
    1da0:	6d a7       	std	Y+45, r22	; 0x2d
    1da2:	7e a7       	std	Y+46, r23	; 0x2e
    1da4:	2f a7       	std	Y+47, r18	; 0x2f
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    1da6:	80 e2       	ldi	r24, 0x20	; 32
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	9e 01       	movw	r18, r28
    1dac:	28 5f       	subi	r18, 0xF8	; 248
    1dae:	3f 4f       	sbci	r19, 0xFF	; 255
    1db0:	82 0f       	add	r24, r18
    1db2:	93 1f       	adc	r25, r19
    1db4:	9a 83       	std	Y+2, r25	; 0x02
    1db6:	89 83       	std	Y+1, r24	; 0x01

  *str = '\0';
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	10 82       	st	Z, r1

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1dc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dc2:	82 30       	cpi	r24, 0x02	; 2
    1dc4:	10 f4       	brcc	.+4      	; 0x1dca <_ZN5Print11printNumberEmh+0x46>
    1dc6:	8a e0       	ldi	r24, 0x0A	; 10
    1dc8:	8f a7       	std	Y+47, r24	; 0x2f

  do {
    unsigned long m = n;
    1dca:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dcc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dce:	ad a5       	ldd	r26, Y+45	; 0x2d
    1dd0:	be a5       	ldd	r27, Y+46	; 0x2e
    1dd2:	8b 83       	std	Y+3, r24	; 0x03
    1dd4:	9c 83       	std	Y+4, r25	; 0x04
    1dd6:	ad 83       	std	Y+5, r26	; 0x05
    1dd8:	be 83       	std	Y+6, r27	; 0x06
    n /= base;
    1dda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	50 e0       	ldi	r21, 0x00	; 0
    1de4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1de6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1de8:	ad a5       	ldd	r26, Y+45	; 0x2d
    1dea:	be a5       	ldd	r27, Y+46	; 0x2e
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	37 d6       	rcall	.+3182   	; 0x2a60 <__udivmodsi4>
    1df2:	da 01       	movw	r26, r20
    1df4:	c9 01       	movw	r24, r18
    1df6:	8b a7       	std	Y+43, r24	; 0x2b
    1df8:	9c a7       	std	Y+44, r25	; 0x2c
    1dfa:	ad a7       	std	Y+45, r26	; 0x2d
    1dfc:	be a7       	std	Y+46, r27	; 0x2e
    char c = m - base * n;
    1dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1e00:	2b a5       	ldd	r18, Y+43	; 0x2b
    1e02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e04:	28 9f       	mul	r18, r24
    1e06:	80 2d       	mov	r24, r0
    1e08:	11 24       	eor	r1, r1
    1e0a:	f9 2f       	mov	r31, r25
    1e0c:	f8 1b       	sub	r31, r24
    1e0e:	8f 2f       	mov	r24, r31
    1e10:	8f 83       	std	Y+7, r24	; 0x07
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	9a 81       	ldd	r25, Y+2	; 0x02
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	9a 83       	std	Y+2, r25	; 0x02
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e1e:	8a 30       	cpi	r24, 0x0A	; 10
    1e20:	20 f4       	brcc	.+8      	; 0x1e2a <_ZN5Print11printNumberEmh+0xa6>
    1e22:	8f 81       	ldd	r24, Y+7	; 0x07
    1e24:	20 e3       	ldi	r18, 0x30	; 48
    1e26:	28 0f       	add	r18, r24
    1e28:	03 c0       	rjmp	.+6      	; 0x1e30 <_ZN5Print11printNumberEmh+0xac>
    1e2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e2c:	27 e3       	ldi	r18, 0x37	; 55
    1e2e:	28 0f       	add	r18, r24
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	9a 81       	ldd	r25, Y+2	; 0x02
    1e34:	fc 01       	movw	r30, r24
    1e36:	20 83       	st	Z, r18
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1e38:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e3c:	ad a5       	ldd	r26, Y+45	; 0x2d
    1e3e:	be a5       	ldd	r27, Y+46	; 0x2e
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	a1 05       	cpc	r26, r1
    1e44:	b1 05       	cpc	r27, r1
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <_ZN5Print11printNumberEmh+0xc6>
    1e48:	c0 cf       	rjmp	.-128    	; 0x1dca <_ZN5Print11printNumberEmh+0x46>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    1e4a:	29 81       	ldd	r18, Y+1	; 0x01
    1e4c:	3a 81       	ldd	r19, Y+2	; 0x02
    1e4e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e50:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e52:	b9 01       	movw	r22, r18
    1e54:	ab de       	rcall	.-682    	; 0x1bac <_ZN5Print5writeEPKc>
}
    1e56:	e3 96       	adiw	r28, 0x33	; 51
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	08 95       	ret

00001e68 <alarmTimeOut>:
#include <rtos.h>

alarmClock_t *alarm1, *alarm2;
int x;

void alarmTimeOut(void *p) {
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
    1e6c:	1f 92       	push	r1
    1e6e:	1f 92       	push	r1
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	89 83       	std	Y+1, r24	; 0x01
	x++;
    1e78:	80 91 ef 14 	lds	r24, 0x14EF
    1e7c:	90 91 f0 14 	lds	r25, 0x14F0
    1e80:	01 96       	adiw	r24, 0x01	; 1
    1e82:	90 93 f0 14 	sts	0x14F0, r25
    1e86:	80 93 ef 14 	sts	0x14EF, r24
}
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	08 95       	ret

00001e94 <setup>:



void setup(){
    1e94:	cf 92       	push	r12
    1e96:	ef 92       	push	r14
    1e98:	ff 92       	push	r15
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
	x=0;
    1ea6:	10 92 f0 14 	sts	0x14F0, r1
    1eaa:	10 92 ef 14 	sts	0x14EF, r1
	alarm1 = (alarmClock_t *)pvMalloc(sizeof(alarmClock_t));
    1eae:	85 e2       	ldi	r24, 0x25	; 37
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	12 db       	rcall	.-2524   	; 0x14d8 <pvMalloc>
    1eb4:	90 93 f4 14 	sts	0x14F4, r25
    1eb8:	80 93 f3 14 	sts	0x14F3, r24
	alarm2 = (alarmClock_t *)pvMalloc(sizeof(alarmClock_t));
    1ebc:	85 e2       	ldi	r24, 0x25	; 37
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	0b db       	rcall	.-2538   	; 0x14d8 <pvMalloc>
    1ec2:	90 93 f2 14 	sts	0x14F2, r25
    1ec6:	80 93 f1 14 	sts	0x14F1, r24
	vAlarmClock_Init(alarm1,"alarm1", alarmTimeOut, alarm1, 50, SET_ONESHOT);
    1eca:	20 91 f3 14 	lds	r18, 0x14F3
    1ece:	30 91 f4 14 	lds	r19, 0x14F4
    1ed2:	80 91 f3 14 	lds	r24, 0x14F3
    1ed6:	90 91 f4 14 	lds	r25, 0x14F4
    1eda:	68 94       	set
    1edc:	cc 24       	eor	r12, r12
    1ede:	c1 f8       	bld	r12, 1
    1ee0:	12 e3       	ldi	r17, 0x32	; 50
    1ee2:	e1 2e       	mov	r14, r17
    1ee4:	f1 2c       	mov	r15, r1
    1ee6:	00 e0       	ldi	r16, 0x00	; 0
    1ee8:	10 e0       	ldi	r17, 0x00	; 0
    1eea:	44 e3       	ldi	r20, 0x34	; 52
    1eec:	5f e0       	ldi	r21, 0x0F	; 15
    1eee:	61 e0       	ldi	r22, 0x01	; 1
    1ef0:	72 e0       	ldi	r23, 0x02	; 2
    1ef2:	e9 d8       	rcall	.-3630   	; 0x10c6 <vAlarmClock_Init>
	vAlarmClock_Init(alarm2,"alarm2", alarmTimeOut, alarm2, 60, SET_PERIODIC);
    1ef4:	20 91 f1 14 	lds	r18, 0x14F1
    1ef8:	30 91 f2 14 	lds	r19, 0x14F2
    1efc:	80 91 f1 14 	lds	r24, 0x14F1
    1f00:	90 91 f2 14 	lds	r25, 0x14F2
    1f04:	0f 2e       	mov	r0, r31
    1f06:	f3 e0       	ldi	r31, 0x03	; 3
    1f08:	cf 2e       	mov	r12, r31
    1f0a:	f0 2d       	mov	r31, r0
    1f0c:	1c e3       	ldi	r17, 0x3C	; 60
    1f0e:	e1 2e       	mov	r14, r17
    1f10:	f1 2c       	mov	r15, r1
    1f12:	00 e0       	ldi	r16, 0x00	; 0
    1f14:	10 e0       	ldi	r17, 0x00	; 0
    1f16:	44 e3       	ldi	r20, 0x34	; 52
    1f18:	5f e0       	ldi	r21, 0x0F	; 15
    1f1a:	68 e0       	ldi	r22, 0x08	; 8
    1f1c:	72 e0       	ldi	r23, 0x02	; 2
    1f1e:	d3 d8       	rcall	.-3674   	; 0x10c6 <vAlarmClock_Init>
	ucAlarmClock_Start(alarm1);
    1f20:	80 91 f3 14 	lds	r24, 0x14F3
    1f24:	90 91 f4 14 	lds	r25, 0x14F4
    1f28:	5b d9       	rcall	.-3402   	; 0x11e0 <ucAlarmClock_Start>
	ucAlarmClock_Start(alarm2);
    1f2a:	80 91 f1 14 	lds	r24, 0x14F1
    1f2e:	90 91 f2 14 	lds	r25, 0x14F2
    1f32:	56 d9       	rcall	.-3412   	; 0x11e0 <ucAlarmClock_Start>
}
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	ff 90       	pop	r15
    1f3e:	ef 90       	pop	r14
    1f40:	cf 90       	pop	r12
    1f42:	08 95       	ret

00001f44 <loop>:

void loop(){
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
	
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	08 95       	ret

00001f52 <_Z12disableTimerh>:

// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	1f 92       	push	r1
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	89 83       	std	Y+1, r24	; 0x01
  switch (_timer)
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	82 30       	cpi	r24, 0x02	; 2
    1f66:	91 05       	cpc	r25, r1
    1f68:	11 f1       	breq	.+68     	; 0x1fae <_Z12disableTimerh+0x5c>
    1f6a:	83 30       	cpi	r24, 0x03	; 3
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	34 f4       	brge	.+12     	; 0x1f7c <_Z12disableTimerh+0x2a>
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	71 f0       	breq	.+28     	; 0x1f90 <_Z12disableTimerh+0x3e>
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	91 05       	cpc	r25, r1
    1f78:	81 f0       	breq	.+32     	; 0x1f9a <_Z12disableTimerh+0x48>
    1f7a:	45 c0       	rjmp	.+138    	; 0x2006 <_Z12disableTimerh+0xb4>
    1f7c:	84 30       	cpi	r24, 0x04	; 4
    1f7e:	91 05       	cpc	r25, r1
    1f80:	c1 f1       	breq	.+112    	; 0x1ff2 <_Z12disableTimerh+0xa0>
    1f82:	84 30       	cpi	r24, 0x04	; 4
    1f84:	91 05       	cpc	r25, r1
    1f86:	84 f1       	brlt	.+96     	; 0x1fe8 <_Z12disableTimerh+0x96>
    1f88:	85 30       	cpi	r24, 0x05	; 5
    1f8a:	91 05       	cpc	r25, r1
    1f8c:	b9 f1       	breq	.+110    	; 0x1ffc <_Z12disableTimerh+0xaa>
    1f8e:	3b c0       	rjmp	.+118    	; 0x2006 <_Z12disableTimerh+0xb4>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    1f90:	8e e6       	ldi	r24, 0x6E	; 110
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	fc 01       	movw	r30, r24
    1f96:	10 82       	st	Z, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    1f98:	36 c0       	rjmp	.+108    	; 0x2006 <_Z12disableTimerh+0xb4>

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    1f9a:	8f e6       	ldi	r24, 0x6F	; 111
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	2f e6       	ldi	r18, 0x6F	; 111
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	f9 01       	movw	r30, r18
    1fa4:	20 81       	ld	r18, Z
    1fa6:	2d 7f       	andi	r18, 0xFD	; 253
    1fa8:	fc 01       	movw	r30, r24
    1faa:	20 83       	st	Z, r18
      break;
    1fac:	2c c0       	rjmp	.+88     	; 0x2006 <_Z12disableTimerh+0xb4>
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    1fae:	80 e7       	ldi	r24, 0x70	; 112
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	20 e7       	ldi	r18, 0x70	; 112
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	f9 01       	movw	r30, r18
    1fb8:	20 81       	ld	r18, Z
    1fba:	2d 7f       	andi	r18, 0xFD	; 253
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	20 83       	st	Z, r18
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    1fc0:	80 eb       	ldi	r24, 0xB0	; 176
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	21 e0       	ldi	r18, 0x01	; 1
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	20 83       	st	Z, r18
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    1fca:	81 eb       	ldi	r24, 0xB1	; 177
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	21 eb       	ldi	r18, 0xB1	; 177
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	f9 01       	movw	r30, r18
    1fd4:	20 81       	ld	r18, Z
    1fd6:	28 7f       	andi	r18, 0xF8	; 248
    1fd8:	24 60       	ori	r18, 0x04	; 4
    1fda:	fc 01       	movw	r30, r24
    1fdc:	20 83       	st	Z, r18
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    1fde:	83 eb       	ldi	r24, 0xB3	; 179
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	10 82       	st	Z, r1
      #endif
      break;
    1fe6:	0f c0       	rjmp	.+30     	; 0x2006 <_Z12disableTimerh+0xb4>

#if defined(TIMSK3)
    case 3:
      TIMSK3 = 0;
    1fe8:	81 e7       	ldi	r24, 0x71	; 113
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	fc 01       	movw	r30, r24
    1fee:	10 82       	st	Z, r1
      break;
    1ff0:	0a c0       	rjmp	.+20     	; 0x2006 <_Z12disableTimerh+0xb4>
#endif

#if defined(TIMSK4)
    case 4:
      TIMSK4 = 0;
    1ff2:	82 e7       	ldi	r24, 0x72	; 114
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	10 82       	st	Z, r1
      break;
    1ffa:	05 c0       	rjmp	.+10     	; 0x2006 <_Z12disableTimerh+0xb4>
#endif

#if defined(TIMSK5)
    case 5:
      TIMSK5 = 0;
    1ffc:	83 e7       	ldi	r24, 0x73	; 115
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	fc 01       	movw	r30, r24
    2002:	10 82       	st	Z, r1
      break;
    2004:	00 00       	nop
#endif
  }
}
    2006:	0f 90       	pop	r0
    2008:	df 91       	pop	r29
    200a:	cf 91       	pop	r28
    200c:	08 95       	ret

0000200e <_Z6noToneh>:


void noTone(uint8_t _pin)
{
    200e:	cf 93       	push	r28
    2010:	df 93       	push	r29
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	27 97       	sbiw	r28, 0x07	; 7
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	8f 83       	std	Y+7, r24	; 0x07
  int8_t _timer = -1;
    2024:	8f ef       	ldi	r24, 0xFF	; 255
    2026:	89 83       	std	Y+1, r24	; 0x01
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    2028:	1b 82       	std	Y+3, r1	; 0x03
    202a:	1a 82       	std	Y+2, r1	; 0x02
    202c:	22 c0       	rjmp	.+68     	; 0x2072 <_Z6noToneh+0x64>
    if (tone_pins[i] == _pin) {
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	9b 81       	ldd	r25, Y+3	; 0x03
    2032:	80 50       	subi	r24, 0x00	; 0
    2034:	9e 4f       	sbci	r25, 0xFE	; 254
    2036:	fc 01       	movw	r30, r24
    2038:	90 81       	ld	r25, Z
    203a:	8f 81       	ldd	r24, Y+7	; 0x07
    203c:	98 17       	cp	r25, r24
    203e:	a1 f4       	brne	.+40     	; 0x2068 <_Z6noToneh+0x5a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	9b 81       	ldd	r25, Y+3	; 0x03
    2044:	88 5f       	subi	r24, 0xF8	; 248
    2046:	9e 4f       	sbci	r25, 0xFE	; 254
    2048:	9d 83       	std	Y+5, r25	; 0x05
    204a:	8c 83       	std	Y+4, r24	; 0x04
    204c:	8c 81       	ldd	r24, Y+4	; 0x04
    204e:	9d 81       	ldd	r25, Y+5	; 0x05
    2050:	fc 01       	movw	r30, r24
    2052:	84 91       	lpm	r24, Z
    2054:	8e 83       	std	Y+6, r24	; 0x06
    2056:	8e 81       	ldd	r24, Y+6	; 0x06
    2058:	89 83       	std	Y+1, r24	; 0x01
      tone_pins[i] = 255;
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	9b 81       	ldd	r25, Y+3	; 0x03
    205e:	80 50       	subi	r24, 0x00	; 0
    2060:	9e 4f       	sbci	r25, 0xFE	; 254
    2062:	2f ef       	ldi	r18, 0xFF	; 255
    2064:	fc 01       	movw	r30, r24
    2066:	20 83       	st	Z, r18

void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	9b 81       	ldd	r25, Y+3	; 0x03
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	9b 83       	std	Y+3, r25	; 0x03
    2070:	8a 83       	std	Y+2, r24	; 0x02
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	9b 81       	ldd	r25, Y+3	; 0x03
    2076:	18 16       	cp	r1, r24
    2078:	19 06       	cpc	r1, r25
    207a:	cc f6       	brge	.-78     	; 0x202e <_Z6noToneh+0x20>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	69 df       	rcall	.-302    	; 0x1f52 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    2080:	60 e0       	ldi	r22, 0x00	; 0
    2082:	8f 81       	ldd	r24, Y+7	; 0x07
    2084:	67 d4       	rcall	.+2254   	; 0x2954 <digitalWrite>
}
    2086:	27 96       	adiw	r28, 0x07	; 7
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	08 95       	ret

00002098 <__vector_13>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    2098:	1f 92       	push	r1
    209a:	0f 92       	push	r0
    209c:	00 90 5f 00 	lds	r0, 0x005F
    20a0:	0f 92       	push	r0
    20a2:	11 24       	eor	r1, r1
    20a4:	00 90 5b 00 	lds	r0, 0x005B
    20a8:	0f 92       	push	r0
    20aa:	2f 93       	push	r18
    20ac:	3f 93       	push	r19
    20ae:	4f 93       	push	r20
    20b0:	5f 93       	push	r21
    20b2:	6f 93       	push	r22
    20b4:	7f 93       	push	r23
    20b6:	8f 93       	push	r24
    20b8:	9f 93       	push	r25
    20ba:	af 93       	push	r26
    20bc:	bf 93       	push	r27
    20be:	ef 93       	push	r30
    20c0:	ff 93       	push	r31
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62

  if (timer2_toggle_count != 0)
    20ca:	80 91 bf 04 	lds	r24, 0x04BF
    20ce:	90 91 c0 04 	lds	r25, 0x04C0
    20d2:	a0 91 c1 04 	lds	r26, 0x04C1
    20d6:	b0 91 c2 04 	lds	r27, 0x04C2
    20da:	21 e0       	ldi	r18, 0x01	; 1
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	a1 05       	cpc	r26, r1
    20e0:	b1 05       	cpc	r27, r1
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <__vector_13+0x4e>
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	22 23       	and	r18, r18
    20e8:	a1 f1       	breq	.+104    	; 0x2152 <__vector_13+0xba>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    20ea:	40 91 c5 04 	lds	r20, 0x04C5
    20ee:	80 91 c3 04 	lds	r24, 0x04C3
    20f2:	90 91 c4 04 	lds	r25, 0x04C4
    20f6:	20 91 c3 04 	lds	r18, 0x04C3
    20fa:	30 91 c4 04 	lds	r19, 0x04C4
    20fe:	f9 01       	movw	r30, r18
    2100:	20 81       	ld	r18, Z
    2102:	24 27       	eor	r18, r20
    2104:	fc 01       	movw	r30, r24
    2106:	20 83       	st	Z, r18

    if (timer2_toggle_count > 0)
    2108:	80 91 bf 04 	lds	r24, 0x04BF
    210c:	90 91 c0 04 	lds	r25, 0x04C0
    2110:	a0 91 c1 04 	lds	r26, 0x04C1
    2114:	b0 91 c2 04 	lds	r27, 0x04C2
    2118:	21 e0       	ldi	r18, 0x01	; 1
    211a:	18 16       	cp	r1, r24
    211c:	19 06       	cpc	r1, r25
    211e:	1a 06       	cpc	r1, r26
    2120:	1b 06       	cpc	r1, r27
    2122:	0c f0       	brlt	.+2      	; 0x2126 <__vector_13+0x8e>
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	22 23       	and	r18, r18
    2128:	b9 f0       	breq	.+46     	; 0x2158 <__vector_13+0xc0>
      timer2_toggle_count--;
    212a:	80 91 bf 04 	lds	r24, 0x04BF
    212e:	90 91 c0 04 	lds	r25, 0x04C0
    2132:	a0 91 c1 04 	lds	r26, 0x04C1
    2136:	b0 91 c2 04 	lds	r27, 0x04C2
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	a1 09       	sbc	r26, r1
    213e:	b1 09       	sbc	r27, r1
    2140:	80 93 bf 04 	sts	0x04BF, r24
    2144:	90 93 c0 04 	sts	0x04C0, r25
    2148:	a0 93 c1 04 	sts	0x04C1, r26
    214c:	b0 93 c2 04 	sts	0x04C2, r27
    2150:	03 c0       	rjmp	.+6      	; 0x2158 <__vector_13+0xc0>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    2152:	80 91 00 02 	lds	r24, 0x0200
    2156:	5b df       	rcall	.-330    	; 0x200e <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	ff 91       	pop	r31
    215e:	ef 91       	pop	r30
    2160:	bf 91       	pop	r27
    2162:	af 91       	pop	r26
    2164:	9f 91       	pop	r25
    2166:	8f 91       	pop	r24
    2168:	7f 91       	pop	r23
    216a:	6f 91       	pop	r22
    216c:	5f 91       	pop	r21
    216e:	4f 91       	pop	r20
    2170:	3f 91       	pop	r19
    2172:	2f 91       	pop	r18
    2174:	0f 90       	pop	r0
    2176:	00 92 5b 00 	sts	0x005B, r0
    217a:	0f 90       	pop	r0
    217c:	00 92 5f 00 	sts	0x005F, r0
    2180:	0f 90       	pop	r0
    2182:	1f 90       	pop	r1
    2184:	18 95       	reti

00002186 <__vector_1>:
		intFunc[EXTERNAL_INT_4]();
}

#elif defined(EICRA) && defined(EICRB)

ISR(INT0_vect) {
    2186:	1f 92       	push	r1
    2188:	0f 92       	push	r0
    218a:	00 90 5f 00 	lds	r0, 0x005F
    218e:	0f 92       	push	r0
    2190:	11 24       	eor	r1, r1
    2192:	00 90 5b 00 	lds	r0, 0x005B
    2196:	0f 92       	push	r0
    2198:	2f 93       	push	r18
    219a:	3f 93       	push	r19
    219c:	4f 93       	push	r20
    219e:	5f 93       	push	r21
    21a0:	6f 93       	push	r22
    21a2:	7f 93       	push	r23
    21a4:	8f 93       	push	r24
    21a6:	9f 93       	push	r25
    21a8:	af 93       	push	r26
    21aa:	bf 93       	push	r27
    21ac:	ef 93       	push	r30
    21ae:	ff 93       	push	r31
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_2])
    21b8:	80 91 ca 04 	lds	r24, 0x04CA
    21bc:	90 91 cb 04 	lds	r25, 0x04CB
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	31 f0       	breq	.+12     	; 0x21d0 <__vector_1+0x4a>
    intFunc[EXTERNAL_INT_2]();
    21c4:	80 91 ca 04 	lds	r24, 0x04CA
    21c8:	90 91 cb 04 	lds	r25, 0x04CB
    21cc:	fc 01       	movw	r30, r24
    21ce:	19 95       	eicall
}
    21d0:	df 91       	pop	r29
    21d2:	cf 91       	pop	r28
    21d4:	ff 91       	pop	r31
    21d6:	ef 91       	pop	r30
    21d8:	bf 91       	pop	r27
    21da:	af 91       	pop	r26
    21dc:	9f 91       	pop	r25
    21de:	8f 91       	pop	r24
    21e0:	7f 91       	pop	r23
    21e2:	6f 91       	pop	r22
    21e4:	5f 91       	pop	r21
    21e6:	4f 91       	pop	r20
    21e8:	3f 91       	pop	r19
    21ea:	2f 91       	pop	r18
    21ec:	0f 90       	pop	r0
    21ee:	00 92 5b 00 	sts	0x005B, r0
    21f2:	0f 90       	pop	r0
    21f4:	00 92 5f 00 	sts	0x005F, r0
    21f8:	0f 90       	pop	r0
    21fa:	1f 90       	pop	r1
    21fc:	18 95       	reti

000021fe <__vector_2>:

ISR(INT1_vect) {
    21fe:	1f 92       	push	r1
    2200:	0f 92       	push	r0
    2202:	00 90 5f 00 	lds	r0, 0x005F
    2206:	0f 92       	push	r0
    2208:	11 24       	eor	r1, r1
    220a:	00 90 5b 00 	lds	r0, 0x005B
    220e:	0f 92       	push	r0
    2210:	2f 93       	push	r18
    2212:	3f 93       	push	r19
    2214:	4f 93       	push	r20
    2216:	5f 93       	push	r21
    2218:	6f 93       	push	r22
    221a:	7f 93       	push	r23
    221c:	8f 93       	push	r24
    221e:	9f 93       	push	r25
    2220:	af 93       	push	r26
    2222:	bf 93       	push	r27
    2224:	ef 93       	push	r30
    2226:	ff 93       	push	r31
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_3])
    2230:	80 91 cc 04 	lds	r24, 0x04CC
    2234:	90 91 cd 04 	lds	r25, 0x04CD
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	31 f0       	breq	.+12     	; 0x2248 <__stack+0x49>
    intFunc[EXTERNAL_INT_3]();
    223c:	80 91 cc 04 	lds	r24, 0x04CC
    2240:	90 91 cd 04 	lds	r25, 0x04CD
    2244:	fc 01       	movw	r30, r24
    2246:	19 95       	eicall
}
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	ff 91       	pop	r31
    224e:	ef 91       	pop	r30
    2250:	bf 91       	pop	r27
    2252:	af 91       	pop	r26
    2254:	9f 91       	pop	r25
    2256:	8f 91       	pop	r24
    2258:	7f 91       	pop	r23
    225a:	6f 91       	pop	r22
    225c:	5f 91       	pop	r21
    225e:	4f 91       	pop	r20
    2260:	3f 91       	pop	r19
    2262:	2f 91       	pop	r18
    2264:	0f 90       	pop	r0
    2266:	00 92 5b 00 	sts	0x005B, r0
    226a:	0f 90       	pop	r0
    226c:	00 92 5f 00 	sts	0x005F, r0
    2270:	0f 90       	pop	r0
    2272:	1f 90       	pop	r1
    2274:	18 95       	reti

00002276 <__vector_3>:

ISR(INT2_vect) {
    2276:	1f 92       	push	r1
    2278:	0f 92       	push	r0
    227a:	00 90 5f 00 	lds	r0, 0x005F
    227e:	0f 92       	push	r0
    2280:	11 24       	eor	r1, r1
    2282:	00 90 5b 00 	lds	r0, 0x005B
    2286:	0f 92       	push	r0
    2288:	2f 93       	push	r18
    228a:	3f 93       	push	r19
    228c:	4f 93       	push	r20
    228e:	5f 93       	push	r21
    2290:	6f 93       	push	r22
    2292:	7f 93       	push	r23
    2294:	8f 93       	push	r24
    2296:	9f 93       	push	r25
    2298:	af 93       	push	r26
    229a:	bf 93       	push	r27
    229c:	ef 93       	push	r30
    229e:	ff 93       	push	r31
    22a0:	cf 93       	push	r28
    22a2:	df 93       	push	r29
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_4])
    22a8:	80 91 ce 04 	lds	r24, 0x04CE
    22ac:	90 91 cf 04 	lds	r25, 0x04CF
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	31 f0       	breq	.+12     	; 0x22c0 <__vector_3+0x4a>
    intFunc[EXTERNAL_INT_4]();
    22b4:	80 91 ce 04 	lds	r24, 0x04CE
    22b8:	90 91 cf 04 	lds	r25, 0x04CF
    22bc:	fc 01       	movw	r30, r24
    22be:	19 95       	eicall
}
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	ff 91       	pop	r31
    22c6:	ef 91       	pop	r30
    22c8:	bf 91       	pop	r27
    22ca:	af 91       	pop	r26
    22cc:	9f 91       	pop	r25
    22ce:	8f 91       	pop	r24
    22d0:	7f 91       	pop	r23
    22d2:	6f 91       	pop	r22
    22d4:	5f 91       	pop	r21
    22d6:	4f 91       	pop	r20
    22d8:	3f 91       	pop	r19
    22da:	2f 91       	pop	r18
    22dc:	0f 90       	pop	r0
    22de:	00 92 5b 00 	sts	0x005B, r0
    22e2:	0f 90       	pop	r0
    22e4:	00 92 5f 00 	sts	0x005F, r0
    22e8:	0f 90       	pop	r0
    22ea:	1f 90       	pop	r1
    22ec:	18 95       	reti

000022ee <__vector_4>:

ISR(INT3_vect) {
    22ee:	1f 92       	push	r1
    22f0:	0f 92       	push	r0
    22f2:	00 90 5f 00 	lds	r0, 0x005F
    22f6:	0f 92       	push	r0
    22f8:	11 24       	eor	r1, r1
    22fa:	00 90 5b 00 	lds	r0, 0x005B
    22fe:	0f 92       	push	r0
    2300:	2f 93       	push	r18
    2302:	3f 93       	push	r19
    2304:	4f 93       	push	r20
    2306:	5f 93       	push	r21
    2308:	6f 93       	push	r22
    230a:	7f 93       	push	r23
    230c:	8f 93       	push	r24
    230e:	9f 93       	push	r25
    2310:	af 93       	push	r26
    2312:	bf 93       	push	r27
    2314:	ef 93       	push	r30
    2316:	ff 93       	push	r31
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_5])
    2320:	80 91 d0 04 	lds	r24, 0x04D0
    2324:	90 91 d1 04 	lds	r25, 0x04D1
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	31 f0       	breq	.+12     	; 0x2338 <__vector_4+0x4a>
    intFunc[EXTERNAL_INT_5]();
    232c:	80 91 d0 04 	lds	r24, 0x04D0
    2330:	90 91 d1 04 	lds	r25, 0x04D1
    2334:	fc 01       	movw	r30, r24
    2336:	19 95       	eicall
}
    2338:	df 91       	pop	r29
    233a:	cf 91       	pop	r28
    233c:	ff 91       	pop	r31
    233e:	ef 91       	pop	r30
    2340:	bf 91       	pop	r27
    2342:	af 91       	pop	r26
    2344:	9f 91       	pop	r25
    2346:	8f 91       	pop	r24
    2348:	7f 91       	pop	r23
    234a:	6f 91       	pop	r22
    234c:	5f 91       	pop	r21
    234e:	4f 91       	pop	r20
    2350:	3f 91       	pop	r19
    2352:	2f 91       	pop	r18
    2354:	0f 90       	pop	r0
    2356:	00 92 5b 00 	sts	0x005B, r0
    235a:	0f 90       	pop	r0
    235c:	00 92 5f 00 	sts	0x005F, r0
    2360:	0f 90       	pop	r0
    2362:	1f 90       	pop	r1
    2364:	18 95       	reti

00002366 <__vector_5>:

ISR(INT4_vect) {
    2366:	1f 92       	push	r1
    2368:	0f 92       	push	r0
    236a:	00 90 5f 00 	lds	r0, 0x005F
    236e:	0f 92       	push	r0
    2370:	11 24       	eor	r1, r1
    2372:	00 90 5b 00 	lds	r0, 0x005B
    2376:	0f 92       	push	r0
    2378:	2f 93       	push	r18
    237a:	3f 93       	push	r19
    237c:	4f 93       	push	r20
    237e:	5f 93       	push	r21
    2380:	6f 93       	push	r22
    2382:	7f 93       	push	r23
    2384:	8f 93       	push	r24
    2386:	9f 93       	push	r25
    2388:	af 93       	push	r26
    238a:	bf 93       	push	r27
    238c:	ef 93       	push	r30
    238e:	ff 93       	push	r31
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_0])
    2398:	80 91 c6 04 	lds	r24, 0x04C6
    239c:	90 91 c7 04 	lds	r25, 0x04C7
    23a0:	00 97       	sbiw	r24, 0x00	; 0
    23a2:	31 f0       	breq	.+12     	; 0x23b0 <__vector_5+0x4a>
    intFunc[EXTERNAL_INT_0]();
    23a4:	80 91 c6 04 	lds	r24, 0x04C6
    23a8:	90 91 c7 04 	lds	r25, 0x04C7
    23ac:	fc 01       	movw	r30, r24
    23ae:	19 95       	eicall
}
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	ff 91       	pop	r31
    23b6:	ef 91       	pop	r30
    23b8:	bf 91       	pop	r27
    23ba:	af 91       	pop	r26
    23bc:	9f 91       	pop	r25
    23be:	8f 91       	pop	r24
    23c0:	7f 91       	pop	r23
    23c2:	6f 91       	pop	r22
    23c4:	5f 91       	pop	r21
    23c6:	4f 91       	pop	r20
    23c8:	3f 91       	pop	r19
    23ca:	2f 91       	pop	r18
    23cc:	0f 90       	pop	r0
    23ce:	00 92 5b 00 	sts	0x005B, r0
    23d2:	0f 90       	pop	r0
    23d4:	00 92 5f 00 	sts	0x005F, r0
    23d8:	0f 90       	pop	r0
    23da:	1f 90       	pop	r1
    23dc:	18 95       	reti

000023de <__vector_6>:

ISR(INT5_vect) {
    23de:	1f 92       	push	r1
    23e0:	0f 92       	push	r0
    23e2:	00 90 5f 00 	lds	r0, 0x005F
    23e6:	0f 92       	push	r0
    23e8:	11 24       	eor	r1, r1
    23ea:	00 90 5b 00 	lds	r0, 0x005B
    23ee:	0f 92       	push	r0
    23f0:	2f 93       	push	r18
    23f2:	3f 93       	push	r19
    23f4:	4f 93       	push	r20
    23f6:	5f 93       	push	r21
    23f8:	6f 93       	push	r22
    23fa:	7f 93       	push	r23
    23fc:	8f 93       	push	r24
    23fe:	9f 93       	push	r25
    2400:	af 93       	push	r26
    2402:	bf 93       	push	r27
    2404:	ef 93       	push	r30
    2406:	ff 93       	push	r31
    2408:	cf 93       	push	r28
    240a:	df 93       	push	r29
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_1])
    2410:	80 91 c8 04 	lds	r24, 0x04C8
    2414:	90 91 c9 04 	lds	r25, 0x04C9
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	31 f0       	breq	.+12     	; 0x2428 <__vector_6+0x4a>
    intFunc[EXTERNAL_INT_1]();
    241c:	80 91 c8 04 	lds	r24, 0x04C8
    2420:	90 91 c9 04 	lds	r25, 0x04C9
    2424:	fc 01       	movw	r30, r24
    2426:	19 95       	eicall
}
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	ff 91       	pop	r31
    242e:	ef 91       	pop	r30
    2430:	bf 91       	pop	r27
    2432:	af 91       	pop	r26
    2434:	9f 91       	pop	r25
    2436:	8f 91       	pop	r24
    2438:	7f 91       	pop	r23
    243a:	6f 91       	pop	r22
    243c:	5f 91       	pop	r21
    243e:	4f 91       	pop	r20
    2440:	3f 91       	pop	r19
    2442:	2f 91       	pop	r18
    2444:	0f 90       	pop	r0
    2446:	00 92 5b 00 	sts	0x005B, r0
    244a:	0f 90       	pop	r0
    244c:	00 92 5f 00 	sts	0x005F, r0
    2450:	0f 90       	pop	r0
    2452:	1f 90       	pop	r1
    2454:	18 95       	reti

00002456 <__vector_7>:

ISR(INT6_vect) {
    2456:	1f 92       	push	r1
    2458:	0f 92       	push	r0
    245a:	00 90 5f 00 	lds	r0, 0x005F
    245e:	0f 92       	push	r0
    2460:	11 24       	eor	r1, r1
    2462:	00 90 5b 00 	lds	r0, 0x005B
    2466:	0f 92       	push	r0
    2468:	2f 93       	push	r18
    246a:	3f 93       	push	r19
    246c:	4f 93       	push	r20
    246e:	5f 93       	push	r21
    2470:	6f 93       	push	r22
    2472:	7f 93       	push	r23
    2474:	8f 93       	push	r24
    2476:	9f 93       	push	r25
    2478:	af 93       	push	r26
    247a:	bf 93       	push	r27
    247c:	ef 93       	push	r30
    247e:	ff 93       	push	r31
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_6])
    2488:	80 91 d2 04 	lds	r24, 0x04D2
    248c:	90 91 d3 04 	lds	r25, 0x04D3
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	31 f0       	breq	.+12     	; 0x24a0 <__vector_7+0x4a>
    intFunc[EXTERNAL_INT_6]();
    2494:	80 91 d2 04 	lds	r24, 0x04D2
    2498:	90 91 d3 04 	lds	r25, 0x04D3
    249c:	fc 01       	movw	r30, r24
    249e:	19 95       	eicall
}
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	ff 91       	pop	r31
    24a6:	ef 91       	pop	r30
    24a8:	bf 91       	pop	r27
    24aa:	af 91       	pop	r26
    24ac:	9f 91       	pop	r25
    24ae:	8f 91       	pop	r24
    24b0:	7f 91       	pop	r23
    24b2:	6f 91       	pop	r22
    24b4:	5f 91       	pop	r21
    24b6:	4f 91       	pop	r20
    24b8:	3f 91       	pop	r19
    24ba:	2f 91       	pop	r18
    24bc:	0f 90       	pop	r0
    24be:	00 92 5b 00 	sts	0x005B, r0
    24c2:	0f 90       	pop	r0
    24c4:	00 92 5f 00 	sts	0x005F, r0
    24c8:	0f 90       	pop	r0
    24ca:	1f 90       	pop	r1
    24cc:	18 95       	reti

000024ce <__vector_8>:

ISR(INT7_vect) {
    24ce:	1f 92       	push	r1
    24d0:	0f 92       	push	r0
    24d2:	00 90 5f 00 	lds	r0, 0x005F
    24d6:	0f 92       	push	r0
    24d8:	11 24       	eor	r1, r1
    24da:	00 90 5b 00 	lds	r0, 0x005B
    24de:	0f 92       	push	r0
    24e0:	2f 93       	push	r18
    24e2:	3f 93       	push	r19
    24e4:	4f 93       	push	r20
    24e6:	5f 93       	push	r21
    24e8:	6f 93       	push	r22
    24ea:	7f 93       	push	r23
    24ec:	8f 93       	push	r24
    24ee:	9f 93       	push	r25
    24f0:	af 93       	push	r26
    24f2:	bf 93       	push	r27
    24f4:	ef 93       	push	r30
    24f6:	ff 93       	push	r31
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_7])
    2500:	80 91 d4 04 	lds	r24, 0x04D4
    2504:	90 91 d5 04 	lds	r25, 0x04D5
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	31 f0       	breq	.+12     	; 0x2518 <__vector_8+0x4a>
    intFunc[EXTERNAL_INT_7]();
    250c:	80 91 d4 04 	lds	r24, 0x04D4
    2510:	90 91 d5 04 	lds	r25, 0x04D5
    2514:	fc 01       	movw	r30, r24
    2516:	19 95       	eicall
}
    2518:	df 91       	pop	r29
    251a:	cf 91       	pop	r28
    251c:	ff 91       	pop	r31
    251e:	ef 91       	pop	r30
    2520:	bf 91       	pop	r27
    2522:	af 91       	pop	r26
    2524:	9f 91       	pop	r25
    2526:	8f 91       	pop	r24
    2528:	7f 91       	pop	r23
    252a:	6f 91       	pop	r22
    252c:	5f 91       	pop	r21
    252e:	4f 91       	pop	r20
    2530:	3f 91       	pop	r19
    2532:	2f 91       	pop	r18
    2534:	0f 90       	pop	r0
    2536:	00 92 5b 00 	sts	0x005B, r0
    253a:	0f 90       	pop	r0
    253c:	00 92 5f 00 	sts	0x005F, r0
    2540:	0f 90       	pop	r0
    2542:	1f 90       	pop	r1
    2544:	18 95       	reti

00002546 <__vector_23>:
	// busy wait
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
}
    2546:	1f 92       	push	r1
    2548:	0f 92       	push	r0
    254a:	00 90 5f 00 	lds	r0, 0x005F
    254e:	0f 92       	push	r0
    2550:	11 24       	eor	r1, r1
    2552:	8f 93       	push	r24
    2554:	9f 93       	push	r25
    2556:	af 93       	push	r26
    2558:	bf 93       	push	r27
    255a:	cf 93       	push	r28
    255c:	df 93       	push	r29
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	25 97       	sbiw	r28, 0x05	; 5
    2564:	de bf       	out	0x3e, r29	; 62
    2566:	cd bf       	out	0x3d, r28	; 61
    2568:	80 91 da 04 	lds	r24, 0x04DA
    256c:	90 91 db 04 	lds	r25, 0x04DB
    2570:	a0 91 dc 04 	lds	r26, 0x04DC
    2574:	b0 91 dd 04 	lds	r27, 0x04DD
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	ab 83       	std	Y+3, r26	; 0x03
    257e:	bc 83       	std	Y+4, r27	; 0x04
    2580:	80 91 de 04 	lds	r24, 0x04DE
    2584:	8d 83       	std	Y+5, r24	; 0x05
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	9a 81       	ldd	r25, Y+2	; 0x02
    258a:	ab 81       	ldd	r26, Y+3	; 0x03
    258c:	bc 81       	ldd	r27, Y+4	; 0x04
    258e:	40 96       	adiw	r24, 0x10	; 16
    2590:	a1 1d       	adc	r26, r1
    2592:	b1 1d       	adc	r27, r1
    2594:	89 83       	std	Y+1, r24	; 0x01
    2596:	9a 83       	std	Y+2, r25	; 0x02
    2598:	ab 83       	std	Y+3, r26	; 0x03
    259a:	bc 83       	std	Y+4, r27	; 0x04
    259c:	8d 81       	ldd	r24, Y+5	; 0x05
    259e:	80 5d       	subi	r24, 0xD0	; 208
    25a0:	8d 83       	std	Y+5, r24	; 0x05
    25a2:	8d 81       	ldd	r24, Y+5	; 0x05
    25a4:	8d 37       	cpi	r24, 0x7D	; 125
    25a6:	70 f0       	brcs	.+28     	; 0x25c4 <__vector_23+0x7e>
    25a8:	8d 81       	ldd	r24, Y+5	; 0x05
    25aa:	8d 57       	subi	r24, 0x7D	; 125
    25ac:	8d 83       	std	Y+5, r24	; 0x05
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	9a 81       	ldd	r25, Y+2	; 0x02
    25b2:	ab 81       	ldd	r26, Y+3	; 0x03
    25b4:	bc 81       	ldd	r27, Y+4	; 0x04
    25b6:	01 96       	adiw	r24, 0x01	; 1
    25b8:	a1 1d       	adc	r26, r1
    25ba:	b1 1d       	adc	r27, r1
    25bc:	89 83       	std	Y+1, r24	; 0x01
    25be:	9a 83       	std	Y+2, r25	; 0x02
    25c0:	ab 83       	std	Y+3, r26	; 0x03
    25c2:	bc 83       	std	Y+4, r27	; 0x04
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	80 93 de 04 	sts	0x04DE, r24
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	9a 81       	ldd	r25, Y+2	; 0x02
    25ce:	ab 81       	ldd	r26, Y+3	; 0x03
    25d0:	bc 81       	ldd	r27, Y+4	; 0x04
    25d2:	80 93 da 04 	sts	0x04DA, r24
    25d6:	90 93 db 04 	sts	0x04DB, r25
    25da:	a0 93 dc 04 	sts	0x04DC, r26
    25de:	b0 93 dd 04 	sts	0x04DD, r27
    25e2:	80 91 d6 04 	lds	r24, 0x04D6
    25e6:	90 91 d7 04 	lds	r25, 0x04D7
    25ea:	a0 91 d8 04 	lds	r26, 0x04D8
    25ee:	b0 91 d9 04 	lds	r27, 0x04D9
    25f2:	01 96       	adiw	r24, 0x01	; 1
    25f4:	a1 1d       	adc	r26, r1
    25f6:	b1 1d       	adc	r27, r1
    25f8:	80 93 d6 04 	sts	0x04D6, r24
    25fc:	90 93 d7 04 	sts	0x04D7, r25
    2600:	a0 93 d8 04 	sts	0x04D8, r26
    2604:	b0 93 d9 04 	sts	0x04D9, r27
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	df 91       	pop	r29
    2614:	cf 91       	pop	r28
    2616:	bf 91       	pop	r27
    2618:	af 91       	pop	r26
    261a:	9f 91       	pop	r25
    261c:	8f 91       	pop	r24
    261e:	0f 90       	pop	r0
    2620:	00 92 5f 00 	sts	0x005F, r0
    2624:	0f 90       	pop	r0
    2626:	1f 90       	pop	r1
    2628:	18 95       	reti

0000262a <init>:

void init()
{
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2632:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2634:	84 e4       	ldi	r24, 0x44	; 68
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	24 e4       	ldi	r18, 0x44	; 68
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	f9 01       	movw	r30, r18
    263e:	20 81       	ld	r18, Z
    2640:	22 60       	ori	r18, 0x02	; 2
    2642:	fc 01       	movw	r30, r24
    2644:	20 83       	st	Z, r18
	sbi(TCCR0A, WGM00);
    2646:	84 e4       	ldi	r24, 0x44	; 68
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	24 e4       	ldi	r18, 0x44	; 68
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	f9 01       	movw	r30, r18
    2650:	20 81       	ld	r18, Z
    2652:	21 60       	ori	r18, 0x01	; 1
    2654:	fc 01       	movw	r30, r24
    2656:	20 83       	st	Z, r18
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2658:	85 e4       	ldi	r24, 0x45	; 69
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	25 e4       	ldi	r18, 0x45	; 69
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	f9 01       	movw	r30, r18
    2662:	20 81       	ld	r18, Z
    2664:	22 60       	ori	r18, 0x02	; 2
    2666:	fc 01       	movw	r30, r24
    2668:	20 83       	st	Z, r18
	sbi(TCCR0B, CS00);
    266a:	85 e4       	ldi	r24, 0x45	; 69
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	25 e4       	ldi	r18, 0x45	; 69
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	f9 01       	movw	r30, r18
    2674:	20 81       	ld	r18, Z
    2676:	21 60       	ori	r18, 0x01	; 1
    2678:	fc 01       	movw	r30, r24
    267a:	20 83       	st	Z, r18

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    267c:	8e e6       	ldi	r24, 0x6E	; 110
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	2e e6       	ldi	r18, 0x6E	; 110
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	f9 01       	movw	r30, r18
    2686:	20 81       	ld	r18, Z
    2688:	21 60       	ori	r18, 0x01	; 1
    268a:	fc 01       	movw	r30, r24
    268c:	20 83       	st	Z, r18
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    268e:	81 e8       	ldi	r24, 0x81	; 129
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	fc 01       	movw	r30, r24
    2694:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2696:	81 e8       	ldi	r24, 0x81	; 129
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	21 e8       	ldi	r18, 0x81	; 129
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	f9 01       	movw	r30, r18
    26a0:	20 81       	ld	r18, Z
    26a2:	22 60       	ori	r18, 0x02	; 2
    26a4:	fc 01       	movw	r30, r24
    26a6:	20 83       	st	Z, r18
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    26a8:	80 e8       	ldi	r24, 0x80	; 128
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	20 e8       	ldi	r18, 0x80	; 128
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	f9 01       	movw	r30, r18
    26b2:	20 81       	ld	r18, Z
    26b4:	21 60       	ori	r18, 0x01	; 1
    26b6:	fc 01       	movw	r30, r24
    26b8:	20 83       	st	Z, r18

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    26ba:	81 eb       	ldi	r24, 0xB1	; 177
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	21 eb       	ldi	r18, 0xB1	; 177
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	f9 01       	movw	r30, r18
    26c4:	20 81       	ld	r18, Z
    26c6:	24 60       	ori	r18, 0x04	; 4
    26c8:	fc 01       	movw	r30, r24
    26ca:	20 83       	st	Z, r18

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    26cc:	80 eb       	ldi	r24, 0xB0	; 176
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	20 eb       	ldi	r18, 0xB0	; 176
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	f9 01       	movw	r30, r18
    26d6:	20 81       	ld	r18, Z
    26d8:	21 60       	ori	r18, 0x01	; 1
    26da:	fc 01       	movw	r30, r24
    26dc:	20 83       	st	Z, r18
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    26de:	81 e9       	ldi	r24, 0x91	; 145
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	21 e9       	ldi	r18, 0x91	; 145
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	f9 01       	movw	r30, r18
    26e8:	20 81       	ld	r18, Z
    26ea:	22 60       	ori	r18, 0x02	; 2
    26ec:	fc 01       	movw	r30, r24
    26ee:	20 83       	st	Z, r18
	sbi(TCCR3B, CS30);
    26f0:	81 e9       	ldi	r24, 0x91	; 145
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	21 e9       	ldi	r18, 0x91	; 145
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	f9 01       	movw	r30, r18
    26fa:	20 81       	ld	r18, Z
    26fc:	21 60       	ori	r18, 0x01	; 1
    26fe:	fc 01       	movw	r30, r24
    2700:	20 83       	st	Z, r18
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2702:	80 e9       	ldi	r24, 0x90	; 144
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	20 e9       	ldi	r18, 0x90	; 144
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	f9 01       	movw	r30, r18
    270c:	20 81       	ld	r18, Z
    270e:	21 60       	ori	r18, 0x01	; 1
    2710:	fc 01       	movw	r30, r24
    2712:	20 83       	st	Z, r18
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2714:	81 ea       	ldi	r24, 0xA1	; 161
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	21 ea       	ldi	r18, 0xA1	; 161
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	f9 01       	movw	r30, r18
    271e:	20 81       	ld	r18, Z
    2720:	22 60       	ori	r18, 0x02	; 2
    2722:	fc 01       	movw	r30, r24
    2724:	20 83       	st	Z, r18
	sbi(TCCR4B, CS40);
    2726:	81 ea       	ldi	r24, 0xA1	; 161
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	21 ea       	ldi	r18, 0xA1	; 161
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	f9 01       	movw	r30, r18
    2730:	20 81       	ld	r18, Z
    2732:	21 60       	ori	r18, 0x01	; 1
    2734:	fc 01       	movw	r30, r24
    2736:	20 83       	st	Z, r18
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2738:	80 ea       	ldi	r24, 0xA0	; 160
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	20 ea       	ldi	r18, 0xA0	; 160
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	f9 01       	movw	r30, r18
    2742:	20 81       	ld	r18, Z
    2744:	21 60       	ori	r18, 0x01	; 1
    2746:	fc 01       	movw	r30, r24
    2748:	20 83       	st	Z, r18
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    274a:	81 e2       	ldi	r24, 0x21	; 33
    274c:	91 e0       	ldi	r25, 0x01	; 1
    274e:	21 e2       	ldi	r18, 0x21	; 33
    2750:	31 e0       	ldi	r19, 0x01	; 1
    2752:	f9 01       	movw	r30, r18
    2754:	20 81       	ld	r18, Z
    2756:	22 60       	ori	r18, 0x02	; 2
    2758:	fc 01       	movw	r30, r24
    275a:	20 83       	st	Z, r18
	sbi(TCCR5B, CS50);
    275c:	81 e2       	ldi	r24, 0x21	; 33
    275e:	91 e0       	ldi	r25, 0x01	; 1
    2760:	21 e2       	ldi	r18, 0x21	; 33
    2762:	31 e0       	ldi	r19, 0x01	; 1
    2764:	f9 01       	movw	r30, r18
    2766:	20 81       	ld	r18, Z
    2768:	21 60       	ori	r18, 0x01	; 1
    276a:	fc 01       	movw	r30, r24
    276c:	20 83       	st	Z, r18
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    276e:	80 e2       	ldi	r24, 0x20	; 32
    2770:	91 e0       	ldi	r25, 0x01	; 1
    2772:	20 e2       	ldi	r18, 0x20	; 32
    2774:	31 e0       	ldi	r19, 0x01	; 1
    2776:	f9 01       	movw	r30, r18
    2778:	20 81       	ld	r18, Z
    277a:	21 60       	ori	r18, 0x01	; 1
    277c:	fc 01       	movw	r30, r24
    277e:	20 83       	st	Z, r18
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2780:	8a e7       	ldi	r24, 0x7A	; 122
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	2a e7       	ldi	r18, 0x7A	; 122
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	f9 01       	movw	r30, r18
    278a:	20 81       	ld	r18, Z
    278c:	24 60       	ori	r18, 0x04	; 4
    278e:	fc 01       	movw	r30, r24
    2790:	20 83       	st	Z, r18
	sbi(ADCSRA, ADPS1);
    2792:	8a e7       	ldi	r24, 0x7A	; 122
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	2a e7       	ldi	r18, 0x7A	; 122
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	f9 01       	movw	r30, r18
    279c:	20 81       	ld	r18, Z
    279e:	22 60       	ori	r18, 0x02	; 2
    27a0:	fc 01       	movw	r30, r24
    27a2:	20 83       	st	Z, r18
	sbi(ADCSRA, ADPS0);
    27a4:	8a e7       	ldi	r24, 0x7A	; 122
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	2a e7       	ldi	r18, 0x7A	; 122
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	f9 01       	movw	r30, r18
    27ae:	20 81       	ld	r18, Z
    27b0:	21 60       	ori	r18, 0x01	; 1
    27b2:	fc 01       	movw	r30, r24
    27b4:	20 83       	st	Z, r18

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    27b6:	8a e7       	ldi	r24, 0x7A	; 122
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	2a e7       	ldi	r18, 0x7A	; 122
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	f9 01       	movw	r30, r18
    27c0:	20 81       	ld	r18, Z
    27c2:	20 68       	ori	r18, 0x80	; 128
    27c4:	fc 01       	movw	r30, r24
    27c6:	20 83       	st	Z, r18
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    27c8:	81 ec       	ldi	r24, 0xC1	; 193
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	fc 01       	movw	r30, r24
    27ce:	10 82       	st	Z, r1
#endif
}
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	08 95       	ret

000027d6 <turnOffPWM>:
// - Added more #ifdefs, now compiles for atmega645
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	1f 92       	push	r1
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	89 83       	std	Y+1, r24	; 0x01
	switch (timer)
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	88 2f       	mov	r24, r24
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	aa 27       	eor	r26, r26
    27ea:	97 fd       	sbrc	r25, 7
    27ec:	a0 95       	com	r26
    27ee:	ba 2f       	mov	r27, r26
    27f0:	41 e0       	ldi	r20, 0x01	; 1
    27f2:	50 e0       	ldi	r21, 0x00	; 0
    27f4:	21 e1       	ldi	r18, 0x11	; 17
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	84 1b       	sub	r24, r20
    27fa:	95 0b       	sbc	r25, r21
    27fc:	28 17       	cp	r18, r24
    27fe:	39 07       	cpc	r19, r25
    2800:	08 f4       	brcc	.+2      	; 0x2804 <turnOffPWM+0x2e>
    2802:	a4 c0       	rjmp	.+328    	; 0x294c <turnOffPWM+0x176>
    2804:	8e 58       	subi	r24, 0x8E	; 142
    2806:	9f 4f       	sbci	r25, 0xFF	; 255
    2808:	fc 01       	movw	r30, r24
    280a:	4c c1       	rjmp	.+664    	; 0x2aa4 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    280c:	80 e8       	ldi	r24, 0x80	; 128
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	20 e8       	ldi	r18, 0x80	; 128
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	f9 01       	movw	r30, r18
    2816:	20 81       	ld	r18, Z
    2818:	2f 77       	andi	r18, 0x7F	; 127
    281a:	fc 01       	movw	r30, r24
    281c:	20 83       	st	Z, r18
    281e:	96 c0       	rjmp	.+300    	; 0x294c <turnOffPWM+0x176>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2820:	80 e8       	ldi	r24, 0x80	; 128
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	20 e8       	ldi	r18, 0x80	; 128
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	f9 01       	movw	r30, r18
    282a:	20 81       	ld	r18, Z
    282c:	2f 7d       	andi	r18, 0xDF	; 223
    282e:	fc 01       	movw	r30, r24
    2830:	20 83       	st	Z, r18
    2832:	8c c0       	rjmp	.+280    	; 0x294c <turnOffPWM+0x176>
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    2834:	80 e8       	ldi	r24, 0x80	; 128
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	20 e8       	ldi	r18, 0x80	; 128
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	f9 01       	movw	r30, r18
    283e:	20 81       	ld	r18, Z
    2840:	27 7f       	andi	r18, 0xF7	; 247
    2842:	fc 01       	movw	r30, r24
    2844:	20 83       	st	Z, r18
    2846:	82 c0       	rjmp	.+260    	; 0x294c <turnOffPWM+0x176>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2848:	84 e4       	ldi	r24, 0x44	; 68
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	24 e4       	ldi	r18, 0x44	; 68
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	f9 01       	movw	r30, r18
    2852:	20 81       	ld	r18, Z
    2854:	2f 77       	andi	r18, 0x7F	; 127
    2856:	fc 01       	movw	r30, r24
    2858:	20 83       	st	Z, r18
    285a:	78 c0       	rjmp	.+240    	; 0x294c <turnOffPWM+0x176>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    285c:	84 e4       	ldi	r24, 0x44	; 68
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	24 e4       	ldi	r18, 0x44	; 68
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	f9 01       	movw	r30, r18
    2866:	20 81       	ld	r18, Z
    2868:	2f 7d       	andi	r18, 0xDF	; 223
    286a:	fc 01       	movw	r30, r24
    286c:	20 83       	st	Z, r18
    286e:	6e c0       	rjmp	.+220    	; 0x294c <turnOffPWM+0x176>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2870:	80 eb       	ldi	r24, 0xB0	; 176
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	20 eb       	ldi	r18, 0xB0	; 176
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	f9 01       	movw	r30, r18
    287a:	20 81       	ld	r18, Z
    287c:	2f 77       	andi	r18, 0x7F	; 127
    287e:	fc 01       	movw	r30, r24
    2880:	20 83       	st	Z, r18
    2882:	64 c0       	rjmp	.+200    	; 0x294c <turnOffPWM+0x176>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2884:	80 eb       	ldi	r24, 0xB0	; 176
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	20 eb       	ldi	r18, 0xB0	; 176
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	f9 01       	movw	r30, r18
    288e:	20 81       	ld	r18, Z
    2890:	2f 7d       	andi	r18, 0xDF	; 223
    2892:	fc 01       	movw	r30, r24
    2894:	20 83       	st	Z, r18
    2896:	5a c0       	rjmp	.+180    	; 0x294c <turnOffPWM+0x176>
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    2898:	80 e9       	ldi	r24, 0x90	; 144
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	20 e9       	ldi	r18, 0x90	; 144
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	f9 01       	movw	r30, r18
    28a2:	20 81       	ld	r18, Z
    28a4:	2f 77       	andi	r18, 0x7F	; 127
    28a6:	fc 01       	movw	r30, r24
    28a8:	20 83       	st	Z, r18
    28aa:	50 c0       	rjmp	.+160    	; 0x294c <turnOffPWM+0x176>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    28ac:	80 e9       	ldi	r24, 0x90	; 144
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	20 e9       	ldi	r18, 0x90	; 144
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	f9 01       	movw	r30, r18
    28b6:	20 81       	ld	r18, Z
    28b8:	2f 7d       	andi	r18, 0xDF	; 223
    28ba:	fc 01       	movw	r30, r24
    28bc:	20 83       	st	Z, r18
    28be:	46 c0       	rjmp	.+140    	; 0x294c <turnOffPWM+0x176>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    28c0:	80 e9       	ldi	r24, 0x90	; 144
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	20 e9       	ldi	r18, 0x90	; 144
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	f9 01       	movw	r30, r18
    28ca:	20 81       	ld	r18, Z
    28cc:	27 7f       	andi	r18, 0xF7	; 247
    28ce:	fc 01       	movw	r30, r24
    28d0:	20 83       	st	Z, r18
    28d2:	3c c0       	rjmp	.+120    	; 0x294c <turnOffPWM+0x176>
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    28d4:	80 ea       	ldi	r24, 0xA0	; 160
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	20 ea       	ldi	r18, 0xA0	; 160
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	f9 01       	movw	r30, r18
    28de:	20 81       	ld	r18, Z
    28e0:	2f 77       	andi	r18, 0x7F	; 127
    28e2:	fc 01       	movw	r30, r24
    28e4:	20 83       	st	Z, r18
    28e6:	32 c0       	rjmp	.+100    	; 0x294c <turnOffPWM+0x176>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    28e8:	80 ea       	ldi	r24, 0xA0	; 160
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	20 ea       	ldi	r18, 0xA0	; 160
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	f9 01       	movw	r30, r18
    28f2:	20 81       	ld	r18, Z
    28f4:	2f 7d       	andi	r18, 0xDF	; 223
    28f6:	fc 01       	movw	r30, r24
    28f8:	20 83       	st	Z, r18
    28fa:	28 c0       	rjmp	.+80     	; 0x294c <turnOffPWM+0x176>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    28fc:	80 ea       	ldi	r24, 0xA0	; 160
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	20 ea       	ldi	r18, 0xA0	; 160
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	f9 01       	movw	r30, r18
    2906:	20 81       	ld	r18, Z
    2908:	27 7f       	andi	r18, 0xF7	; 247
    290a:	fc 01       	movw	r30, r24
    290c:	20 83       	st	Z, r18
    290e:	1e c0       	rjmp	.+60     	; 0x294c <turnOffPWM+0x176>
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    2910:	80 e2       	ldi	r24, 0x20	; 32
    2912:	91 e0       	ldi	r25, 0x01	; 1
    2914:	20 e2       	ldi	r18, 0x20	; 32
    2916:	31 e0       	ldi	r19, 0x01	; 1
    2918:	f9 01       	movw	r30, r18
    291a:	20 81       	ld	r18, Z
    291c:	2f 77       	andi	r18, 0x7F	; 127
    291e:	fc 01       	movw	r30, r24
    2920:	20 83       	st	Z, r18
    2922:	14 c0       	rjmp	.+40     	; 0x294c <turnOffPWM+0x176>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2924:	80 e2       	ldi	r24, 0x20	; 32
    2926:	91 e0       	ldi	r25, 0x01	; 1
    2928:	20 e2       	ldi	r18, 0x20	; 32
    292a:	31 e0       	ldi	r19, 0x01	; 1
    292c:	f9 01       	movw	r30, r18
    292e:	20 81       	ld	r18, Z
    2930:	2f 7d       	andi	r18, 0xDF	; 223
    2932:	fc 01       	movw	r30, r24
    2934:	20 83       	st	Z, r18
    2936:	0a c0       	rjmp	.+20     	; 0x294c <turnOffPWM+0x176>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    2938:	80 e2       	ldi	r24, 0x20	; 32
    293a:	91 e0       	ldi	r25, 0x01	; 1
    293c:	20 e2       	ldi	r18, 0x20	; 32
    293e:	31 e0       	ldi	r19, 0x01	; 1
    2940:	f9 01       	movw	r30, r18
    2942:	20 81       	ld	r18, Z
    2944:	27 7f       	andi	r18, 0xF7	; 247
    2946:	fc 01       	movw	r30, r24
    2948:	20 83       	st	Z, r18
    294a:	00 00       	nop
		#endif
	}
}
    294c:	0f 90       	pop	r0
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	08 95       	ret

00002954 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	65 97       	sbiw	r28, 0x15	; 21
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	8c 8b       	std	Y+20, r24	; 0x14
    296a:	6d 8b       	std	Y+21, r22	; 0x15
	uint8_t timer = digitalPinToTimer(pin);
    296c:	8c 89       	ldd	r24, Y+20	; 0x14
    296e:	88 2f       	mov	r24, r24
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	81 55       	subi	r24, 0x51	; 81
    2974:	9e 4f       	sbci	r25, 0xFE	; 254
    2976:	9a 83       	std	Y+2, r25	; 0x02
    2978:	89 83       	std	Y+1, r24	; 0x01
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	9a 81       	ldd	r25, Y+2	; 0x02
    297e:	fc 01       	movw	r30, r24
    2980:	84 91       	lpm	r24, Z
    2982:	8b 83       	std	Y+3, r24	; 0x03
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t bit = digitalPinToBitMask(pin);
    2988:	8c 89       	ldd	r24, Y+20	; 0x14
    298a:	88 2f       	mov	r24, r24
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	87 59       	subi	r24, 0x97	; 151
    2990:	9e 4f       	sbci	r25, 0xFE	; 254
    2992:	9e 83       	std	Y+6, r25	; 0x06
    2994:	8d 83       	std	Y+5, r24	; 0x05
    2996:	8d 81       	ldd	r24, Y+5	; 0x05
    2998:	9e 81       	ldd	r25, Y+6	; 0x06
    299a:	fc 01       	movw	r30, r24
    299c:	84 91       	lpm	r24, Z
    299e:	8f 83       	std	Y+7, r24	; 0x07
    29a0:	8f 81       	ldd	r24, Y+7	; 0x07
    29a2:	88 87       	std	Y+8, r24	; 0x08
	uint8_t port = digitalPinToPort(pin);
    29a4:	8c 89       	ldd	r24, Y+20	; 0x14
    29a6:	88 2f       	mov	r24, r24
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	8d 5d       	subi	r24, 0xDD	; 221
    29ac:	9e 4f       	sbci	r25, 0xFE	; 254
    29ae:	9a 87       	std	Y+10, r25	; 0x0a
    29b0:	89 87       	std	Y+9, r24	; 0x09
    29b2:	89 85       	ldd	r24, Y+9	; 0x09
    29b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b6:	fc 01       	movw	r30, r24
    29b8:	84 91       	lpm	r24, Z
    29ba:	8b 87       	std	Y+11, r24	; 0x0b
    29bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    29be:	8c 87       	std	Y+12, r24	; 0x0c
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    29c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    29c2:	88 23       	and	r24, r24
    29c4:	09 f4       	brne	.+2      	; 0x29c8 <digitalWrite+0x74>
    29c6:	43 c0       	rjmp	.+134    	; 0x2a4e <digitalWrite+0xfa>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    29c8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ca:	88 23       	and	r24, r24
    29cc:	11 f0       	breq	.+4      	; 0x29d2 <digitalWrite+0x7e>
    29ce:	8c 81       	ldd	r24, Y+4	; 0x04
    29d0:	02 df       	rcall	.-508    	; 0x27d6 <turnOffPWM>

	out = portOutputRegister(port);
    29d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    29d4:	88 2f       	mov	r24, r24
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	88 0f       	add	r24, r24
    29da:	99 1f       	adc	r25, r25
    29dc:	87 5f       	subi	r24, 0xF7	; 247
    29de:	9e 4f       	sbci	r25, 0xFE	; 254
    29e0:	9e 87       	std	Y+14, r25	; 0x0e
    29e2:	8d 87       	std	Y+13, r24	; 0x0d
    29e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e8:	fc 01       	movw	r30, r24
    29ea:	25 91       	lpm	r18, Z+
    29ec:	34 91       	lpm	r19, Z
    29ee:	cf 01       	movw	r24, r30
    29f0:	38 8b       	std	Y+16, r19	; 0x10
    29f2:	2f 87       	std	Y+15, r18	; 0x0f
    29f4:	9e 87       	std	Y+14, r25	; 0x0e
    29f6:	8d 87       	std	Y+13, r24	; 0x0d
    29f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29fa:	98 89       	ldd	r25, Y+16	; 0x10
    29fc:	9a 8b       	std	Y+18, r25	; 0x12
    29fe:	89 8b       	std	Y+17, r24	; 0x11

	uint8_t oldSREG = SREG;
    2a00:	8f e5       	ldi	r24, 0x5F	; 95
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	fc 01       	movw	r30, r24
    2a06:	80 81       	ld	r24, Z
    2a08:	8b 8b       	std	Y+19, r24	; 0x13
	cli();
    2a0a:	f8 94       	cli

	if (val == LOW) {
    2a0c:	8d 89       	ldd	r24, Y+21	; 0x15
    2a0e:	88 23       	and	r24, r24
    2a10:	71 f4       	brne	.+28     	; 0x2a2e <digitalWrite+0xda>
		*out &= ~bit;
    2a12:	89 89       	ldd	r24, Y+17	; 0x11
    2a14:	9a 89       	ldd	r25, Y+18	; 0x12
    2a16:	fc 01       	movw	r30, r24
    2a18:	80 81       	ld	r24, Z
    2a1a:	98 2f       	mov	r25, r24
    2a1c:	88 85       	ldd	r24, Y+8	; 0x08
    2a1e:	80 95       	com	r24
    2a20:	89 23       	and	r24, r25
    2a22:	28 2f       	mov	r18, r24
    2a24:	89 89       	ldd	r24, Y+17	; 0x11
    2a26:	9a 89       	ldd	r25, Y+18	; 0x12
    2a28:	fc 01       	movw	r30, r24
    2a2a:	20 83       	st	Z, r18
    2a2c:	0b c0       	rjmp	.+22     	; 0x2a44 <digitalWrite+0xf0>
	} else {
		*out |= bit;
    2a2e:	89 89       	ldd	r24, Y+17	; 0x11
    2a30:	9a 89       	ldd	r25, Y+18	; 0x12
    2a32:	fc 01       	movw	r30, r24
    2a34:	90 81       	ld	r25, Z
    2a36:	88 85       	ldd	r24, Y+8	; 0x08
    2a38:	29 2f       	mov	r18, r25
    2a3a:	28 2b       	or	r18, r24
    2a3c:	89 89       	ldd	r24, Y+17	; 0x11
    2a3e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a40:	fc 01       	movw	r30, r24
    2a42:	20 83       	st	Z, r18
	}

	SREG = oldSREG;
    2a44:	8f e5       	ldi	r24, 0x5F	; 95
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	2b 89       	ldd	r18, Y+19	; 0x13
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	20 83       	st	Z, r18
}
    2a4e:	65 96       	adiw	r28, 0x15	; 21
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	08 95       	ret

00002a60 <__udivmodsi4>:
    2a60:	a1 e2       	ldi	r26, 0x21	; 33
    2a62:	1a 2e       	mov	r1, r26
    2a64:	aa 1b       	sub	r26, r26
    2a66:	bb 1b       	sub	r27, r27
    2a68:	fd 01       	movw	r30, r26
    2a6a:	0d c0       	rjmp	.+26     	; 0x2a86 <__udivmodsi4_ep>

00002a6c <__udivmodsi4_loop>:
    2a6c:	aa 1f       	adc	r26, r26
    2a6e:	bb 1f       	adc	r27, r27
    2a70:	ee 1f       	adc	r30, r30
    2a72:	ff 1f       	adc	r31, r31
    2a74:	a2 17       	cp	r26, r18
    2a76:	b3 07       	cpc	r27, r19
    2a78:	e4 07       	cpc	r30, r20
    2a7a:	f5 07       	cpc	r31, r21
    2a7c:	20 f0       	brcs	.+8      	; 0x2a86 <__udivmodsi4_ep>
    2a7e:	a2 1b       	sub	r26, r18
    2a80:	b3 0b       	sbc	r27, r19
    2a82:	e4 0b       	sbc	r30, r20
    2a84:	f5 0b       	sbc	r31, r21

00002a86 <__udivmodsi4_ep>:
    2a86:	66 1f       	adc	r22, r22
    2a88:	77 1f       	adc	r23, r23
    2a8a:	88 1f       	adc	r24, r24
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	1a 94       	dec	r1
    2a90:	69 f7       	brne	.-38     	; 0x2a6c <__udivmodsi4_loop>
    2a92:	60 95       	com	r22
    2a94:	70 95       	com	r23
    2a96:	80 95       	com	r24
    2a98:	90 95       	com	r25
    2a9a:	9b 01       	movw	r18, r22
    2a9c:	ac 01       	movw	r20, r24
    2a9e:	bd 01       	movw	r22, r26
    2aa0:	cf 01       	movw	r24, r30
    2aa2:	08 95       	ret

00002aa4 <__tablejump2__>:
    2aa4:	ee 0f       	add	r30, r30
    2aa6:	ff 1f       	adc	r31, r31

00002aa8 <__tablejump__>:
    2aa8:	05 90       	lpm	r0, Z+
    2aaa:	f4 91       	lpm	r31, Z
    2aac:	e0 2d       	mov	r30, r0
    2aae:	19 94       	eijmp

00002ab0 <__tablejump_elpm__>:
    2ab0:	07 90       	elpm	r0, Z+
    2ab2:	f6 91       	elpm	r31, Z
    2ab4:	e0 2d       	mov	r30, r0
    2ab6:	19 94       	eijmp

00002ab8 <abort>:
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	f8 94       	cli
    2abe:	10 c0       	rjmp	.+32     	; 0x2ae0 <_exit>

00002ac0 <strcpy>:
    2ac0:	fb 01       	movw	r30, r22
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	01 90       	ld	r0, Z+
    2ac6:	0d 92       	st	X+, r0
    2ac8:	00 20       	and	r0, r0
    2aca:	e1 f7       	brne	.-8      	; 0x2ac4 <strcpy+0x4>
    2acc:	08 95       	ret

00002ace <strlen>:
    2ace:	fc 01       	movw	r30, r24
    2ad0:	01 90       	ld	r0, Z+
    2ad2:	00 20       	and	r0, r0
    2ad4:	e9 f7       	brne	.-6      	; 0x2ad0 <strlen+0x2>
    2ad6:	80 95       	com	r24
    2ad8:	90 95       	com	r25
    2ada:	8e 0f       	add	r24, r30
    2adc:	9f 1f       	adc	r25, r31
    2ade:	08 95       	ret

00002ae0 <_exit>:
    2ae0:	f8 94       	cli

00002ae2 <__stop_program>:
    2ae2:	ff cf       	rjmp	.-2      	; 0x2ae2 <__stop_program>
